{
  "$schema": "../schema/function.schema.json",
  "description": "JSON and JSONB processing functions see https://www.postgresql.org/docs/14/functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE",
  "name": "JSON and JSONB processing functions",
  "keywords": {
    "json_array_elements": [
      {
        "description": "Expands the top-level JSON array into a set of JSON values.",
        "example": "SELECT json_array_elements('[1,2,3]') AS value;",
        "returns": "setof json",
        "parameters": {
          "json": "json"
        }
      }
    ],
    "jsonb_array_elements": [
      {
        "description": "Expands the top-level JSON array into a set of JSONB values.",
        "example": "SELECT jsonb_array_elements('[1,2,3]') AS value;",
        "returns": "setof jsonb",
        "parameters": {
          "jsonb": "jsonb"
        }
      }
    ],
    "json_array_elements_text": [
      {
        "description": "Expands the top-level JSON array into a set of text values.",
        "example": "SELECT json_array_elements_text('['1','2','3']') AS value;",
        "returns": "setof text",
        "parameters": {
          "json": "json"
        }
      }
    ],
    "jsonb_array_elements_text": [
      {
        "description": "Expands the top-level JSONB array into a set of text values.",
        "example": "SELECT jsonb_array_elements_text('['1','2','3']') AS value;",
        "returns": "setof text",
        "parameters": {
          "jsonb": "jsonb"
        }
      }
    ],
    "json_array_length": [
      {
        "description": "Returns the number of elements in the top-level JSON array.",
        "example": "SELECT json_array_length('[1,2,3]') AS value;",
        "returns": "integer",
        "parameters": {
          "json": "json"
        }
      }
    ],
    "jsonb_array_length": [
      {
        "description": "Returns the number of elements in the top-level JSONB array.",
        "example": "SELECT jsonb_array_length('[1,2,3]') AS value;",
        "returns": "integer",
        "parameters": {
          "jsonb": "jsonb"
        }
      }
    ],
    "json_each": [
      {
        "description": "Expands the top-level JSON object into a set of key/value pairs.",
        "example": "SELECT * FROM json_each('{\"a\":1,\"b\":2}');",
        "returns": "setof (key text, value json)",
        "parameters": {
          "json": "json"
        }
      }
    ],
    "jsonb_each": [
      {
        "description": "Expands the top-level JSONB object into a set of key/value pairs.",
        "example": "SELECT * FROM jsonb_each('{\"a\":1,\"b\":2}');",
        "returns": "setof (key text, value jsonb)",
        "parameters": {
          "jsonb": "jsonb"
        }
      }
    ],
    "json_each_text": [
      {
        "description": "Expands the top-level JSON object into a set of key/value pairs. The returned values will be of type text.",
        "example": "SELECT * FROM json_each_text('{\"a\":1,\"b\":2}');",
        "returns": "setof (key text, value text)",
        "parameters": {
          "json": "json"
        }
      }
    ],
    "jsonb_each_text": [
      {
        "description": "Expands the top-level JSONB object into a set of key/value pairs. The returned values will be of type text.",
        "example": "SELECT * FROM jsonb_each_text('{\"a\":1,\"b\":2}');",
        "returns": "setof (key text, value text)",
        "parameters": {
          "jsonb": "jsonb"
        }
      }
    ],
    "json_extract_path": [
      {
        "description": "Extracts JSON sub-object at the specified path.",
        "example": "SELECT json_extract_path('{\"a\":{\"b\":1}}', 'a', 'b') AS value;",
        "returns": "json",
        "parameters": {
          "from_json ": "json",
          "path_elems": "[,text]"
        }
      }
    ],
    "jsonb_extract_path": [
      {
        "description": "Extracts JSONB sub-object at the specified path.",
        "example": "SELECT jsonb_extract_path('{\"a\":{\"b\":1}}', 'a', 'b') AS value;",
        "returns": "jsonb",
        "parameters": {
          "from_json ": "jsonb",
          "path_elems": "[,text]"
        }
      }
    ],
    "json_extract_path_text": [
      {
        "description": "Extracts JSON sub-object at the specified path as text.",
        "example": "SELECT json_extract_path_text('{\"a\":{\"b\":1}}', 'a', 'b') AS value;",
        "returns": "text",
        "parameters": {
          "from_json ": "json",
          "path_elems": "[,text]"
        }
      }
    ],
    "jsonb_extract_path_text": [
      {
        "description": "Extracts JSONB sub-object at the specified path as text.",
        "example": "SELECT jsonb_extract_path_text('{\"a\":{\"b\":1}}', 'a', 'b') AS value;",
        "returns": "text",
        "parameters": {
          "from_json ": "jsonb",
          "path_elems": "[,text]"
        }
      }
    ],
    "json_object_keys": [
      {
        "description": "Returns the set of keys in the top-level JSON object.",
        "example": "SELECT json_object_keys('{\"a\":1,\"b\":2}') AS value;",
        "returns": "setof text",
        "parameters": {
          "json": "json"
        }
      }
    ],
    "jsonb_object_keys": [
      {
        "description": "Returns the set of keys in the top-level JSONB object.",
        "example": "SELECT jsonb_object_keys('{\"a\":1,\"b\":2}') AS value;",
        "returns": "setof text",
        "parameters": {
          "jsonb": "jsonb"
        }
      }
    ],
    "json_populate_record": [
      {
        "description": "Expands the top-level JSON object to a row having the composite type of the base argument.",
        "example": "SELECT * FROM json_populate_record(null::my_table, '{\"a\":1,\"b\":2}');",
        "returns": "anyelement",
        "parameters": {
          "base": "anyelement",
          "from_json": "json"
        }
      }
    ],
    "jsonb_populate_record": [
      {
        "description": "Expands the top-level JSON object to a row having the composite type of the base argument.",
        "example": "SELECT * FROM jsonb_populate_record(null::my_table, '{\"a\":1,\"b\":2}');",
        "returns": "anyelement",
        "parameters": {
          "base": "anyelement",
          "from_json": "jsonb"
        }
      }
    ],
    "json_populate_recordset": [
      {
        "description": "Expands the top-level JSON array of objects to a set of rows having the composite type of the base argument.",
        "example": "SELECT * FROM json_populate_recordset(null::my_table, '[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4}]');",
        "returns": "setof anyelement",
        "parameters": {
          "base": "anyelement",
          "from_json": "json"
        }
      }
    ],
    "jsonb_populate_recordset": [
      {
        "description": "Expands the top-level JSONB array of objects to a set of rows having the composite type of the base argument.",
        "example": "SELECT * FROM jsonb_populate_recordset(null::my_table, '[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4}]');",
        "returns": "setof anyelement",
        "parameters": {
          "base": "anyelement",
          "from_json": "jsonb"
        }
      }
    ],
    "json_to_record": [
      {
        "description": "Expands the top-level JSON object to a row having the composite type defined by an AS clause.",
        "example": "SELECT * FROM json_to_record('{\"a\":1,\"b\":2}') AS (a int, b text);",
        "returns": "record",
        "parameters": {
          "from_json": "json"
        }
      }
    ],
    "jsonb_to_record": [
      {
        "description": "Expands the top-level JSONB object to a row having the composite type defined by an AS clause.",
        "example": "SELECT * FROM jsonb_to_record('{\"a\":1,\"b\":2}') AS (a int, b text);",
        "returns": "record",
        "parameters": {
          "from_json": "jsonb"
        }
      }
    ],
    "json_to_recordset": [
      {
        "description": "Expands the top-level JSON array of objects to a set of rows having the composite type defined by an AS clause.",
        "example": "SELECT * FROM json_to_recordset('[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4}]') AS (a int, b text);",
        "returns": "setof record",
        "parameters": {
          "from_json": "json"
        }
      }
    ],
    "jsonb_to_recordset": [
      {
        "description": "Expands the top-level JSONB array of objects to a set of rows having the composite type defined by an AS clause.",
        "example": "SELECT * FROM jsonb_to_recordset('[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4}]') AS (a int, b text);",
        "returns": "setof record",
        "parameters": {
          "from_json": "jsonb"
        }
      }
    ],
    "json_strip_nulls": [
      {
        "description": "Deletes all object fields that have null values from the given JSON value, recursively.",
        "example": "SELECT json_strip_nulls('{\"a\":1,\"b\":null}') AS value;",
        "returns": "json",
        "parameters": {
          "from_json": "json"
        }
      }
    ],
    "jsonb_strip_nulls": [
      {
        "description": "Deletes all object fields that have null values from the given JSONB value, recursively.",
        "example": "SELECT jsonb_strip_nulls('{\"a\":1,\"b\":null}') AS value;",
        "returns": "jsonb",
        "parameters": {
          "from_json": "jsonb"
        }
      }
    ],
    "jsonb_set": [
      {
        "description": "Returns target with the item designated by path replaced by new_value, or with new_value added if create_if_missing is true (which is the default) and the item designated by path does not exist.",
        "example": "SELECT jsonb_set('{\"a\":1,\"b\":2}', '{b}', '4') AS value;",
        "returns": "jsonb",
        "parameters": {
          "target": "jsonb",
          "path": "text[]",
          "new_value": "jsonb",
          "create_if_missing": "boolean"
        }
      }
    ],
    "jsonb_set_lax": [
      {
        "description": "If new_value is not NULL, behaves identically to jsonb_set. Otherwise behaves according to the value of null_value_treatment which must be one of 'raise_exception', 'use_json_null', 'delete_key', or 'return_target'. The default is 'use_json_null'.",
        "example": "SELECT jsonb_set_lax('{\"a\":1,\"b\":2}', '{b}', NULL, 'delete_key') AS value;",
        "returns": "jsonb",
        "parameters": {
          "target": "jsonb",
          "path": "text[]",
          "new_value": "jsonb",
          "null_value_treatment": "text"
        }
      }
    ],
    "jsonb_insert": [
      {
        "description": "Returns target with new_value inserted.",
        "example": "SELECT jsonb_insert('{\"a\":1,\"b\":2}', '{\"c\":3}', false) AS value;",
        "returns": "jsonb",
        "parameters": {
          "target": "jsonb",
          "path": "text[]",
          "new_value": "jsonb",
          "insert_after": "boolean"
        }
      }
    ],
    "jsonb_path_exists": [
      {
        "description": "Checks whether the JSON path returns any item for the specified JSON value.",
        "example": "SELECT jsonb_path_exists('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2, \"max\":4}');",
        "returns": "boolean",
        "parameters": {
          "from_json": "jsonb",
          "path": "jsonpath",
          "vars ": "jsonb",
          "silent": "boolean"
        }
      }
    ],
    "jsonb_path_match": [
      {
        "description": "Returns the result of a JSON path predicate check for the specified JSON value.",
        "example": "SELECT jsonb_path_match('{\"a\":[1,2,3,4,5]}', 'exists($.a[*] ? (@ >= $min && @ <= $max))', '{\"min\":2, \"max\":4}')",
        "returns": "boolean",
        "parameters": {
          "from_json": "jsonb",
          "path": "jsonpath",
          "vars ": "jsonb",
          "silent": "boolean"
        }
      }
    ],
    "jsonb_path_query": [
      {
        "description": "Returns all JSON items returned by the JSON path for the specified JSON value.",
        "example": "SELECT * from jsonb_path_query('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2, \"max\":4}') ",
        "returns": "setof jsonb",
        "parameters": {
          "from_json": "jsonb",
          "path": "jsonpath",
          "vars": "jsonb",
          "silent": "boolean"
        }
      }
    ],
    "jsonb_path_query_array": [
      {
        "description": "Returns all JSON items returned by the JSON path for the specified JSON value, as a JSON array.",
        "example": "SELECT * FROM jsonb_path_query_array('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2, \"max\":4}')",
        "returns": "jsonb",
        "parameters": {
          "from_json": "jsonb",
          "path": "jsonpath",
          "vars": "jsonb",
          "silent": "boolean"
        }
      }
    ],
    "jsonb_path_query_first": [
      {
        "description": "Returns the first JSON item returned by the JSON path for the specified JSON value. Returns NULL if there are no results.",
        "example": "SELECT jsonb_path_query_first('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2, \"max\":4}')",
        "returns": "jsonb",
        "parameters": {
          "from_json": "jsonb",
          "path": "jsonpath",
          "vars": "jsonb",
          "silent": "boolean"
        }
      }
    ],
    "jsonb_path_exists_tz": [
      {
        "description": "Support comparisons of date/time values that require timezone-aware conversions.",
        "example": "SELECT jsonb_path_exists_tz('{\"a\":[\"2020-01-01T12:00:00Z\"]}', '$.a[*] ? (@ > $date)', '{\"date\":\"2020-01-01T12:00:00Z\"}')",
        "returns": "boolean",
        "parameters": {
          "from_json": "jsonb",
          "path": "jsonpath",
          "vars": "jsonb",
          "silent": "boolean"
        }
      }
    ],
    "jsonb_path_match_tz": [
      {
        "description": "Support comparisons of date/time values that require timezone-aware conversions.",
        "example": "SELECT jsonb_path_match_tz('{\"a\":[\"2020-01-01T12:00:00Z\"]}', 'exists($.a[*] ? (@ > $date))', '{\"date\":\"2020-01-01T12:00:00Z\"}')",
        "returns": "boolean",
        "parameters": {
          "from_json": "jsonb",
          "path": "jsonpath",
          "vars": "jsonb",
          "silent": "boolean"
        }
      }
    ],
    "jsonb_path_query_tz": [
      {
        "description": "Support comparisons of date/time values that require timezone-aware conversions.",
        "example": "SELECT * from jsonb_path_query_tz('{\"a\":[\"2020-01-01T12:00:00Z\"]}', '$.a[*] ? (@ > $date)', '{\"date\":\"2020-01-01T12:00:00Z\"}')",
        "returns": "setof jsonb",
        "parameters": {
          "from_json": "jsonb",
          "path": "jsonpath",
          "vars": "jsonb",
          "silent": "boolean"
        }
      }
    ],
    "jsonb_path_query_array_tz": [
      {
        "description": "Support comparisons of date/time values that require timezone-aware conversions.",
        "example": "SELECT * from jsonb_path_query_array_tz('{\"a\":[\"2020-01-01T12:00:00Z\"]}', '$.a[*] ? (@ > $date)', '{\"date\":\"2020-01-01T12:00:00Z\"}')",
        "returns": "jsonb",
        "parameters": {
          "from_json": "jsonb",
          "path": "jsonpath",
          "vars": "jsonb",
          "silent": "boolean"
        }
      }
    ],
    "jsonb_path_query_first_tz": [
      {
        "description": "Support comparisons of date/time values that require timezone-aware conversions.",
        "example": "SELECT jsonb_path_query_first_tz('{\"a\":[\"2020-01-01T12:00:00Z\"]}', '$.a[*] ? (@ > $date)', '{\"date\":\"2020-01-01T12:00:00Z\"}')",
        "returns": "jsonb",
        "parameters": {
          "from_json": "jsonb",
          "path": "jsonpath",
          "vars": "jsonb",
          "silent": "boolean"
        }
      }
    ],
    "jsonb_pretty": [
      {
        "description": "Converts the given JSON value to pretty-printed, indented text.",
        "example": "SELECT jsonb_pretty('{\"a\":1,\"b\":2}')",
        "returns": "text",
        "parameters": {
          "from_json": "jsonb"
        }
      }
    ],
    "json_typeof": [
      {
        "description": "Returns the type of the top-level JSON value as a text string.",
        "example": "SELECT json_typeof('1')",
        "returns": "text",
        "parameters": {
          "json": "json"
        }
      }
    ],
    "jsonb_typeof": [
      {
        "description": "Returns the type of the top-level JSONB value as a text string.",
        "example": "SELECT jsonb_typeof('1')",
        "returns": "text",
        "parameters": {
          "jsonb": "jsonb"
        }
      }
    ]
  }
}
