{
  "$schema": "../schema/function.schema.json",
  "description": "Mathematical Functions see https://www.postgresql.org/docs/14/functions-math.html#FUNCTIONS-MATH-FUNC-TABLE",
  "name": "Mathematical Functions",
  "keywords": {
    "abs": [
      {
        "description": "Asolute value",
        "example": "SELECT abs(-17.4);",
        "returns": "numeric_type",
        "parameters": { "number": "numeric_type" }
      }
    ],
    "cbrt": [
      {
        "description": "Cube root",
        "example": "SELECT cbrt(27.0);",
        "returns": "double precision",
        "parameters": { "number": "double precision" }
      }
    ],
    "ceil": [
      {
        "description": "Nearest integer greater than or equal to argument",
        "example": "SELECT ceil(-8.4);",
        "returns": "numeric",
        "parameters": { "number": "numeric" }
      },
      {
        "description": "Nearest integer greater than or equal to argument",
        "example": "SELECT ceiling(-8.4);",
        "returns": "double precision",
        "parameters": { "number": "double precision" }
      }
    ],
    "degrees": [
      {
        "description": "Converts radians to degrees",
        "example": "SELECT degrees(0.5);",
        "returns": "double precision",
        "parameters": { "radians": "double precision" }
      }
    ],
    "div": [
      {
        "description": "Integer quotient of y/x (truncates towards zero)",
        "example": "SELECT div(5, 2);",
        "returns": "numeric",
        "parameters": { "y": "numeric", "x": "numeric" }
      }
    ],
    "exp": [
      {
        "description": "Exponential (e raised to the given power)",
        "example": "SELECT exp(1.0);",
        "returns": "numeric",
        "parameters": { "power": "numeric" }
      },
      {
        "description": "Exponential (e raised to the given power)",
        "example": "SELECT exp(1.0);",
        "returns": "double precision",
        "parameters": { "power": "double precision" }
      }
    ],
    "factorial": [
      {
        "description": "Factorial",
        "example": "SELECT factorial(5);",
        "returns": "numeric",
        "parameters": { "number": "bigint" }
      }
    ],
    "floor": [
      {
        "description": "Nearest integer less than or equal to argument",
        "example": "SELECT floor(-8.4);",
        "returns": "numeric",
        "parameters": { "number": "numeric" }
      },
      {
        "description": "Nearest integer less than or equal to argument",
        "example": "SELECT floor(-8.4);",
        "returns": "double precision",
        "parameters": { "number": "double precision" }
      }
    ],
    "gcd": [
      {
        "description": "Greatest common divisor (the largest positive number that divides both inputs with no remainder); returns 0 if both inputs are zero; available for integer, bigint, and numeric",
        "example": "SELECT gcd(1071, 1029);",
        "returns": "numeric_type",
        "parameters": { "a": "numeric_type", "b": "numeric_type" }
      }
    ],
    "lcm": [
      {
        "description": "Least common multiple (the smallest strictly positive number that is an integral multiple of both inputs); returns 0 if either input is zero; available for integer, bigint, and numeric",
        "example": "SELECT lcm(1071, 1029);",
        "returns": "numeric_type",
        "parameters": { "a": "numeric_type", "b": "numeric_type" }
      }
    ],
    "ln": [
      {
        "description": "Natural logarithm",
        "example": "SELECT ln(2.0);",
        "returns": "numeric",
        "parameters": { "number": "numeric" }
      },
      {
        "description": "Natural logarithm",
        "example": "SELECT ln(2.0);",
        "returns": "double precision",
        "parameters": { "number": "double precision" }
      }
    ],
    "log": [
      {
        "description": "Base 10 logarithm",
        "example": "SELECT log(1000.0);",
        "returns": "numeric",
        "parameters": { "number": "numeric" }
      },
      {
        "description": "Base 10 logarithm",
        "example": "SELECT log(2.0, 64.0);",
        "returns": "double precision",
        "parameters": { "number": "double precision" }
      },
      {
        "description": "Logarithm of x to base b",
        "example": "SELECT log(2.0, 64.0);",
        "returns": "numeric",
        "parameters": { "b": "numeric", "x": "numeric" }
      }
    ],
    "log10": [
      {
        "description": "Base 10 logarithm (same as log)",
        "example": "SELECT log10(1000.0);",
        "returns": "numeric",
        "parameters": { "number": "numeric" }
      },
      {
        "description": "Base 10 logarithm (same as log)",
        "example": "SELECT log10(1000.0);",
        "returns": "double precision",
        "parameters": { "number": "double precision" }
      }
    ],
    "min_scale": [
      {
        "description": "Minimum scale of the argument (the number of decimal digits in the fractional part)",
        "example": "SELECT min_scale(123.45);",
        "returns": "integer",
        "parameters": { "number": "numeric" }
      }
    ],
    "mod": [
      {
        "description": "Remainder of y/x; available for smallint, integer, bigint, and numeric",
        "example": "SELECT mod(5, 2);",
        "returns": "numeric_type",
        "parameters": { "y": "numeric_type", "x": "numeric_type" }
      }
    ],
    "pi": [
      {
        "description": "Approximate value of π",
        "example": "SELECT pi();",
        "returns": "double precision"
      }
    ],
    "power": [
      {
        "description": "a raised to the power of b",
        "example": "SELECT power(2.0, 3.0);",
        "returns": "numeric",
        "parameters": { "a": "numeric", "b": "numeric" }
      },
      {
        "description": "a raised to the power of b",
        "example": "SELECT power(2.0, 3.0);",
        "returns": "double precision",
        "parameters": { "a": "double precision", "b": "double precision" }
      }
    ],
    "radians": [
      {
        "description": "Converts degrees to radians",
        "example": "SELECT radians(90.0);",
        "returns": "double precision",
        "parameters": { "degrees": "double precision" }
      }
    ],
    "round": [
      {
        "description": "Rounds to nearest integer. For numeric, ties are broken by rounding away from zero. For double precision, the tie-breaking behavior is platform dependent, but “round to nearest even” is the most common rule.",
        "example": "SELECT round(123.456);",
        "returns": "numeric",
        "parameters": { "number": "numeric" }
      },
      {
        "description": "Rounds to nearest integer. For numeric, ties are broken by rounding away from zero. For double precision, the tie-breaking behavior is platform dependent, but “round to nearest even” is the most common rule.",
        "example": "SELECT round(123.456);",
        "returns": "double precision",
        "parameters": { "number": "double precision" }
      },
      {
        "description": "Rounds v to s decimal places. Ties are broken by rounding away from zero.",
        "example": "SELECT round(123.456, 2);",
        "returns": "numeric",
        "parameters": { "number": "numeric", "decimal_places": "integer" }
      }
    ],
    "scale": [
      {
        "description": "Scale of the argument (the number of decimal digits in the fractional part)",
        "example": "SELECT scale(123.45);",
        "returns": "integer",
        "parameters": { "number": "numeric" }
      }
    ],
    "sign": [
      {
        "description": "Sign of the argument (-1, 0, or +1)",
        "example": "SELECT sign(-8.4);",
        "returns": "numeric",
        "parameters": { "number": "numeric" }
      },
      {
        "description": "Sign of the argument (-1, 0, or +1)",
        "example": "SELECT sign(-8.4);",
        "returns": "double precision",
        "parameters": { "number": "double precision" }
      }
    ],
    "sqrt": [
      {
        "description": "Square root",
        "example": "SELECT sqrt(2.0);",
        "returns": "numeric",
        "parameters": { "number": "numeric" }
      },
      {
        "description": "Square root",
        "example": "SELECT sqrt(2.0);",
        "returns": "double precision",
        "parameters": { "number": "double precision" }
      }
    ],
    "trim_scale": [
      {
        "description": "Reduces the value's scale (number of fractional decimal digits) by removing trailing zeroes",
        "example": "SELECT trim_scale(123.4500);",
        "returns": "numeric",
        "parameters": { "number": "numeric" }
      }
    ],
    "trunc": [
      {
        "description": "Truncates to integer (towards zero)",
        "example": "SELECT trunc(-8.4);",
        "returns": "numeric",
        "parameters": { "number": "numeric" }
      },
      {
        "description": "Truncates to integer (towards zero)",
        "example": "SELECT trunc(-8.4);",
        "returns": "double precision",
        "parameters": { "number": "double precision" }
      },
      {
        "description": "Truncates to specified number of decimal places",
        "example": "SELECT trunc(123.456, 2);",
        "returns": "numeric",
        "parameters": { "number": "numeric", "decimal_places": "integer" }
      }
    ],
    "width_bucket": [
      {
        "description": "Returns the number of the bucket in which operand falls in a histogram having count equal-width buckets spanning the range low to high. Returns 0 or count+1 for an input outside that range.",
        "example": "SELECT width_bucket(5.35, 0.024, 10.06, 5);",
        "returns": "integer",
        "parameters": {
          "operand": "numeric",
          "low": "numeric",
          "high": "numeric",
          "count": "integer"
        }
      },
      {
        "description": "Returns the number of the bucket in which operand falls in a histogram having count equal-width buckets spanning the range low to high. Returns 0 or count+1 for an input outside that range.",
        "example": "SELECT width_bucket(5.35, 0.024, 10.06, 5);",
        "returns": "integer",
        "parameters": {
          "operand": "double precision",
          "low": "double precision",
          "high": "double precision",
          "count": "integer"
        }
      },
      {
        "description": "Returns the number of the bucket in which operand falls given an array listing the lower bounds of the buckets.",
        "example": "SELECT width_bucket(now(), array['yesterday', 'today', 'tomorrow']::timestamptz[]);",
        "returns": "integer",
        "parameters": { "operand": "anycompatible", "thresholds": "anycompatiblearray" }
      }
    ]
  }
}
