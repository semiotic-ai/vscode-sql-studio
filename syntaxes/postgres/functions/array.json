{
  "$schema": "../schema/function.schema.json",
  "description": "Array Functions https://www.postgresql.org/docs/14/functions-array.html#ARRAY-FUNCTIONS-TABLE",
  "name": "Array Functions",
  "keywords": {
    "array_append": [
      {
        "description": "Appends an element to the end of an array (same as the || operator).",
        "example": "SELECT array_append(ARRAY[1,2], 3);",
        "returns": "anycompatiblearray",
        "parameters": {
          "array": "anycompatiblearray",
          "element": "anycompatible"
        }
      }
    ],
    "array_cat": [
      {
        "description": "Concatenates two arrays (same as the || operator).",
        "example": "SELECT array_cat(ARRAY[1,2], ARRAY[3,4]);",
        "returns": "anycompatiblearray",
        "parameters": {
          "array1": "anycompatiblearray",
          "array2": "anycompatiblearray"
        }
      }
    ],
    "array_dims": [
      {
        "description": "Returns a text representation of the array's dimensions.",
        "example": "SELECT array_dims(ARRAY[[1,2],[3,4]]);",
        "returns": "text",
        "parameters": {
          "array": "anyarray"
        }
      }
    ],
    "array_fill": [
      {
        "description": "Returns an array filled with copies of the given value, having dimensions of the lengths specified by the second argument. The optional third argument supplies lower-bound values for each dimension (which default to all 1).",
        "example": "SELECT array_fill(0, ARRAY[2,3], ARRAY[1,1]);",
        "returns": "anyarray",
        "parameters": {
          "value": "anyelement",
          "dims": "integer[]",
          "lbs": "[,integer[]]"
        }
      }
    ],
    "array_length": [
      {
        "description": "Returns the length of the requested array dimension. (Produces NULL instead of 0 for empty or missing array dimensions.)",
        "example": "SELECT array_length(ARRAY[[1,2],[3,4]], 1);",
        "returns": "integer",
        "parameters": {
          "array": "anyarray",
          "dimension": "integer"
        }
      }
    ],
    "array_lower": [
      {
        "description": "Returns the lower bound of the requested array dimension.",
        "example": "SELECT array_lower(ARRAY[[1,2],[3,4]], 1);",
        "returns": "integer",
        "parameters": {
          "array": "anyarray",
          "dimension": "integer"
        }
      }
    ],
    "array_ndims": [
      {
        "description": "Returns the number of dimensions of the array.",
        "example": "SELECT array_ndims(ARRAY[[1,2],[3,4]]);",
        "returns": "integer",
        "parameters": {
          "array": "anyarray"
        }
      }
    ],
    "array_position": [
      {
        "description": "Returns the subscript of the first occurrence of the second argument in the array, or NULL if it's not present.",
        "example": "SELECT array_position(ARRAY[1,2,3,4], 3);",
        "returns": "integer",
        "parameters": {
          "array": "anycompatiblearray",
          "element": "anycompatible",
          "start": "[,integer]"
        }
      }
    ],
    "array_prepend": [
      {
        "description": "Prepends an element to the beginning of an array (same as the || operator).",
        "example": "SELECT array_prepend(0, ARRAY[1,2,3,4]);",
        "returns": "anycompatiblearray",
        "parameters": {
          "element": "anycompatible",
          "array": "anycompatiblearray"
        }
      }
    ],
    "array_remove": [
      {
        "description": "Removes all elements equal to the given value from the array. The array must be one-dimensional. Comparisons are done using IS NOT DISTINCT FROM semantics, so it is possible to remove NULLs.",
        "example": "SELECT array_remove(ARRAY[1,2,3,4,3,2,1], 3);",
        "returns": "anycompatiblearray",
        "parameters": {
          "array": "anycompatiblearray",
          "element": "anycompatible"
        }
      }
    ],
    "array_replace": [
      {
        "description": "Replaces each array element equal to the second argument with the third argument.",
        "example": "SELECT array_replace(ARRAY[1,2,3,4,3,2,1], 3, 0);",
        "returns": "anycompatiblearray",
        "parameters": {
          "array": "anycompatiblearray",
          "element": "anycompatible",
          "new_element": "anycompatible"
        }
      }
    ],
    "array_to_string": [
      {
        "description": "Converts each array element to its text representation, and concatenates those separated by the delimiter string. If null_string is given and is not NULL, then NULL array entries are represented by that string; otherwise, they are omitted.",
        "example": "SELECT array_to_string(ARRAY[1,2,3,4], ', ');",
        "returns": "text",
        "parameters": {
          "array": "anyarray",
          "delimiter": "text",
          "null_string": "text"
        }
      }
    ],
    "array_upper": [
      {
        "description": "Returns the upper bound of the requested array dimension.",
        "example": "SELECT array_upper(ARRAY[[1,2],[3,4]], 1);",
        "returns": "integer",
        "parameters": {
          "array": "anyarray",
          "dimension": "integer"
        }
      }
    ],
    "cardinality": [
      {
        "description": "Returns the total number of elements in the array, or 0 if the array is empty.",
        "example": "SELECT cardinality(ARRAY[[1,2],[3,4]]);",
        "returns": "integer",
        "parameters": {
          "array": "anyarray"
        }
      }
    ],
    "trim_array": [
      {
        "description": "Trims an array by removing the last n elements. If the array is multidimensional, only the first dimension is trimmed.",
        "example": "SELECT trim_array(ARRAY[1,2,3,4,5], 2);",
        "returns": "anyarray",
        "parameters": {
          "array": "anyarray",
          "n": "integer"
        }
      }
    ],
    "unnest": [
      {
        "description": "Expands an array into a set of rows. The array's elements are read out in storage order.",
        "example": "SELECT unnest(ARRAY[1,2,3,4,5]);",
        "returns": "setof anyelement",
        "parameters": {
          "array": "anyarray"
        }
      }
    ]
  }
}
