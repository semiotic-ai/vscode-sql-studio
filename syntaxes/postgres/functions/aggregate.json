{
  "$schema": "../schema/function.schema.json",
  "description": "General purpose aggregate functions https://www.postgresql.org/docs/14/functions-aggregate.html#FUNCTIONS-AGGREGATE-TABLE",
  "name": "Aggregate Functions",
  "keywords": {
    "array_agg": [
      {
        "description": "Collects all the input values, including nulls, into an array.",
        "example": "SELECT array_agg(x) FROM generate_series(1, 5) g(x);",
        "returns": "anyarray",
        "parameters": {
          "x": "anynonarray"
        }
      },
      {
        "description": "Concatenates all the input arrays into an array of one higher dimension. (The inputs must all have the same dimensionality, and cannot be empty or null.)",
        "example": "SELECT array_agg(ARRAY[x, y]) FROM generate_series(1, 5) g(x), generate_series(2, 6) g(y);",
        "returns": "anyarray",
        "parameters": {
          "value": "anyarray"
        }
      }
    ],
    "avg": [
      {
        "description": "Computes the average (arithmetic mean) of all the non-null input values",
        "example": "SELECT avg(x) FROM generate_series(1, 5) g(x);",
        "returns": "numeric",
        "parameters": {
          "x": ["smallint", "integer", "bigint", "numeric"]
        }
      },
      {
        "description": "Computes the average (arithmetic mean) of all the non-null input values",
        "example": "SELECT avg(x) FROM generate_series(1, 5) g(x);",
        "returns": "double precision",
        "parameters": {
          "x": ["real", "double precision"]
        }
      },
      {
        "description": "Computes the average (arithmetic mean) of all the non-null input values",
        "example": "SELECT avg(x) FROM generate_series(1, 5) g(x);",
        "returns": "interval",
        "parameters": {
          "x": ["interval"]
        }
      }
    ],
    "bit_and": [
      {
        "description": "Computes the bitwise AND of all non-null input values.",
        "example": "SELECT bit_and(x) FROM generate_series(1, 5) g(x);",
        "returns": "smallint",
        "parameters": {
          "x": "smallint"
        }
      },
      {
        "description": "Computes the bitwise AND of all non-null input values.",
        "example": "SELECT bit_and(x) FROM generate_series(1, 5) g(x);",
        "returns": "integer",
        "parameters": {
          "x": "integer"
        }
      },
      {
        "description": "Computes the bitwise AND of all non-null input values.",
        "example": "SELECT bit_and(x) FROM generate_series(1, 5) g(x);",
        "returns": "bigint",
        "parameters": {
          "x": "bigint"
        }
      },
      {
        "description": "Computes the bitwise AND of all non-null input values.",
        "example": "SELECT bit_and(x) FROM generate_series(1, 5) g(x);",
        "returns": "bit",
        "parameters": {
          "x": "bit"
        }
      }
    ],
    "bit_or": [
      {
        "description": "Computes the bitwise OR of all non-null input values.",
        "example": "SELECT bit_or(x) FROM generate_series(1, 5) g(x);",
        "returns": "smallint",
        "parameters": {
          "x": "smallint"
        }
      },
      {
        "description": "Computes the bitwise OR of all non-null input values.",
        "example": "SELECT bit_or(x) FROM generate_series(1, 5) g(x);",
        "returns": "integer",
        "parameters": {
          "x": "integer"
        }
      },
      {
        "description": "Computes the bitwise OR of all non-null input values.",
        "example": "SELECT bit_or(x) FROM generate_series(1, 5) g(x);",
        "returns": "bigint",
        "parameters": {
          "x": "bigint"
        }
      },
      {
        "description": "Computes the bitwise OR of all non-null input values.",
        "example": "SELECT bit_or(x) FROM generate_series(1, 5) g(x);",
        "returns": "bit",
        "parameters": {
          "x": "bit"
        }
      }
    ],
    "bit_xor": [
      {
        "description": "Computes the bitwise exclusive OR of all non-null input values. Can be useful as a checksum for an unordered set of values.",
        "example": "SELECT bit_xor(x) FROM generate_series(1, 5) g(x);",
        "returns": "smallint",
        "parameters": {
          "x": "smallint"
        }
      },
      {
        "description": "Computes the bitwise exclusive OR of all non-null input values. Can be useful as a checksum for an unordered set of values.",
        "example": "SELECT bit_xor(x) FROM generate_series(1, 5) g(x);",
        "returns": "integer",
        "parameters": {
          "x": "integer"
        }
      },
      {
        "description": "Computes the bitwise exclusive OR of all non-null input values. Can be useful as a checksum for an unordered set of values.",
        "example": "SELECT bit_xor(x) FROM generate_series(1, 5) g(x);",
        "returns": "bigint",
        "parameters": {
          "x": "bigint"
        }
      },
      {
        "description": "Computes the bitwise exclusive OR of all non-null input values. Can be useful as a checksum for an unordered set of values.",
        "example": "SELECT bit_xor(x) FROM generate_series(1, 5) g(x);",
        "returns": "bit",
        "parameters": {
          "x": "bit"
        }
      }
    ],
    "bool_and": [
      {
        "description": "Returns true if all non-null input values are true, otherwise false.",
        "example": "SELECT bool_and(x) FROM generate_series(true, false, false) g(x);",
        "returns": "boolean",
        "parameters": {
          "x": "boolean"
        }
      }
    ],
    "bool_or": [
      {
        "description": "Returns true if any non-null input value is true, otherwise false.",
        "example": "SELECT bool_or(x) FROM generate_series(true, false, true) g(x);",
        "returns": "boolean",
        "parameters": {
          "x": "boolean"
        }
      }
    ],
    "count": [
      {
        "description": "Computes the number of input rows.",
        "example": "SELECT count(*) FROM generate_series(1, 5);",
        "returns": "bigint",
        "parameters": {}
      },
      {
        "description": "Computes the number of input rows in which the input value is not null.",
        "example": "SELECT count(x) FROM generate_series(1, 5) g(x);",
        "returns": "bigint",
        "parameters": {
          "x": "any"
        }
      }
    ],
    "every": [
      {
        "description": "This is the SQL standard's equivalent to bool_and.",
        "example": "SELECT every(x) FROM generate_series(true, false, false) g(x);",
        "returns": "boolean",
        "parameters": {
          "x": "boolean"
        }
      }
    ],
    "json_agg": [
      {
        "description": "Collects all the input values, including nulls, into a JSON array. Values are converted to JSON as per to_json or to_jsonb.",
        "example": "SELECT json_agg(x) FROM generate_series(1, 5) g(x);",
        "returns": "json",
        "parameters": {
          "x": "anyelement"
        }
      },
      {
        "description": "Collects all the input values, including nulls, into a JSON array. Values are converted to JSON as per to_json or to_jsonb.",
        "example": "SELECT json_agg(x) FROM generate_series(1, 5) g(x);",
        "returns": "jsonb",
        "parameters": {
          "x": "anyelement"
        }
      }
    ],
    "json_object_agg": [
      {
        "description": "Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_json or to_jsonb. Values can be null, but not keys.",
        "example": "SELECT json_object_agg(x, y) FROM generate_series(1, 5) g(x), generate_series(2, 6) g(y);",
        "returns": "json",
        "parameters": {
          "x": "anyelement",
          "y": "anyelement"
        }
      },
      {
        "description": "Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_json or to_jsonb. Values can be null, but not keys.",
        "example": "SELECT json_object_agg(x, y) FROM generate_series(1, 5) g(x), generate_series(2, 6) g(y);",
        "returns": "jsonb",
        "parameters": {
          "x": "anyelement",
          "y": "anyelement"
        }
      }
    ],
    "max": [
      {
        "description": "Computes the maximum of the non-null input values. Available for any numeric, string, date/time, or enum type, as well as inet, interval, money, oid, pg_lsn, tid, and arrays of any of these types.",
        "example": "SELECT max(x) FROM generate_series(1, 5) g(x);",
        "returns": "same as input type",
        "parameters": {
          "x": "any"
        }
      }
    ],
    "min": [
      {
        "description": "Computes the minimum of the non-null input values. Available for any numeric, string, date/time, or enum type, as well as inet, interval, money, oid, pg_lsn, tid, and arrays of any of these types.",
        "example": "SELECT min(x) FROM generate_series(1, 5) g(x);",
        "returns": "same as input type",
        "parameters": {
          "x": "any"
        }
      }
    ],
    "range_agg": [
      {
        "description": "Computes the union of the non-null input values.",
        "example": "SELECT range_agg(x) FROM generate_series(1, 5) g(x);",
        "returns": "anymultirange",
        "parameters": {
          "x": "anyrange"
        }
      }
    ],
    "range_intersect_agg": [
      {
        "description": "Computes the intersection of the non-null input values.",
        "example": "SELECT range_intersect_agg(x) FROM generate_series(1, 5) g(x);",
        "returns": "anyrange",
        "parameters": {
          "x": "anyrange"
        }
      },
      {
        "description": "Computes the intersection of the non-null input values.",
        "example": "SELECT range_intersect_agg(x) FROM generate_series(1, 5) g(x);",
        "returns": "anymultirange",
        "parameters": {
          "x": "anymultirange"
        }
      }
    ],
    "string_agg": [
      {
        "description": "Concatenates the non-null input values into a string. Each value after the first is preceded by the corresponding delimiter (if it's not null).",
        "example": "SELECT string_agg(x, ', ') FROM generate_series(1, 5) g(x);",
        "returns": "text",
        "parameters": {
          "x": "text",
          "delimiter": "text"
        }
      },
      {
        "description": "Concatenates the non-null input values into a string. Each value after the first is preceded by the corresponding delimiter (if it's not null).",
        "example": "SELECT string_agg(x, ', ') FROM generate_series(1, 5) g(x);",
        "returns": "bytea",
        "parameters": {
          "x": "bytea",
          "delimiter": "bytea"
        }
      }
    ],
    "sum": [
      {
        "description": "Computes the sum of the non-null input values.",
        "example": "SELECT sum(x) FROM generate_series(1, 5) g(x);",
        "returns": "smallint",
        "parameters": {
          "x": "smallint"
        }
      },
      {
        "description": "Computes the sum of the non-null input values.",
        "example": "SELECT sum(x) FROM generate_series(1, 5) g(x);",
        "returns": "integer",
        "parameters": {
          "x": "integer"
        }
      },
      {
        "description": "Computes the sum of the non-null input values.",
        "example": "SELECT sum(x) FROM generate_series(1, 5) g(x);",
        "returns": "bigint",
        "parameters": {
          "x": "bigint"
        }
      },
      {
        "description": "Computes the sum of the non-null input values.",
        "example": "SELECT sum(x) FROM generate_series(1, 5) g(x);",
        "returns": "numeric",
        "parameters": {
          "x": "numeric"
        }
      },
      {
        "description": "Computes the sum of the non-null input values.",
        "example": "SELECT sum(x) FROM generate_series(1, 5) g(x);",
        "returns": "real",
        "parameters": {
          "x": "real"
        }
      },
      {
        "description": "Computes the sum of the non-null input values.",
        "example": "SELECT sum(x) FROM generate_series(1, 5) g(x);",
        "returns": "double precision",
        "parameters": {
          "x": "double precision"
        }
      },
      {
        "description": "Computes the sum of the non-null input values.",
        "example": "SELECT sum(x) FROM generate_series(1, 5) g(x);",
        "returns": "interval",
        "parameters": {
          "x": "interval"
        }
      }
    ],
    "xmlagg": [
      {
        "description": "Concatenates the non-null XML input values.",
        "example": "SELECT xmlagg(x) FROM generate_series(1, 5) g(x);",
        "returns": "xml",
        "parameters": {
          "x": "xml"
        }
      }
    ]
  }
}
