{
	"$schema": "../schema/function.schema.json",
	"description": "Additional string functions see https://www.postgresql.org/docs/14/functions-string.html#FUNCTIONS-STRING-OTHER",
	"name": "String Other Functions",
	"keywords": {
		"ascii": [
			{
				"description": "Convert first character to its numeric code",
				"example": "SELECT ascii('ABC');",
				"returns": "integer",
				"parameters": {
					"string": "text"
				}
			}
		],
		"btrim": [
			{
				"description": "Remove the longest string containing only characters from characters (a space by default) from the start and end of string",
				"example": "SELECT btrim('ABCdefABC', 'ABC');",
				"returns": "text",
				"parameters": {
					"string": "text",
					"characters": "text"
				}
			}
		],
		"chr": [
			{
				"description": "Returns the character with the given code",
				"example": "SELECT chr(65);",
				"returns": "text",
				"parameters": {
					"integer": "integer"
				}
			}
		],
		"concat": [
			{
				"description": "Concatenate string representations of all arguments",
				"example": "SELECT concat('ABC', 'def');",
				"returns": "text",
				"parameters": {
					"value": "any[]"
				}
			}
		],
		"concat_ws": [
			{
				"description": "Concatenate with separator",
				"example": "SELECT concat_ws(',', 'ABC', 'def');",
				"returns": "text",
				"parameters": {
					"separator": "text",
					"value": "any[]"
				}
			}
		],
		"format": [
			{
				"description": "Format arguments according to a format string",
				"example": "SELECT format('Hello, %s', 'world');",
				"returns": "text",
				"parameters": {
					"format": "text",
					"value": "any[]"
				}
			}
		],
		"initcap": [
			{
				"description": "Convert first letter of each word to upper case and the rest to lower case",
				"example": "SELECT initcap('ABC def');",
				"returns": "text",
				"parameters": {
					"string": "text"
				}
			}
		],
		"left": [
			{
				"description": "Extract substring",
				"example": "SELECT left('ABCdef', 3);",
				"returns": "text",
				"parameters": {
					"string": "text",
					"count": "integer"
				}
			}
		],
		"length": [
			{
				"description": "Number of characters in string",
				"example": "SELECT length('ABC');",
				"returns": "integer",
				"parameters": {
					"string": "text"
				}
			}
		],
		"lpad": [
			{
				"description": "Pad string to length length by prepending the characters fill (a space by default)",
				"example": "SELECT lpad('ABC', 5, 'x');",
				"returns": "text",
				"parameters": {
					"string": "text",
					"length": "integer",
					"fill": "text"
				}
			}
		],
		"ltrim": [
			{
				"description": "Remove the longest string containing only characters from characters (a space by default) from the start of string",
				"example": "SELECT ltrim('ABCdefABC', 'ABC');",
				"returns": "text",
				"parameters": {
					"string": "text",
					"characters": "text"
				}
			}
		],
		"md5": [
			{
				"description": "Compute MD5 hash",
				"example": "SELECT md5('ABC');",
				"returns": "text",
				"parameters": {
					"string": "text"
				}
			}
		],
		"parse_ident": [
			{
				"description": "Split qualified_identifier into an array of identifiers, removing any quoting of individual identifiers",
				"example": "SELECT parse_ident('\"a\".\"b\"');",
				"returns": "text[]",
				"parameters": {
					"qualified_identifier": "text"
				}
			}
		],
		"quote_ident": [
			{
				"description": "Returns the given string suitably quoted to be used as an identifier in an SQL statement string",
				"example": "SELECT quote_ident('a.b');",
				"returns": "text",
				"parameters": {
					"string": "text"
				}
			}
		],
		"quote_literal": [
			{
				"description": "Returns the given string suitably quoted to be used as a string literal in an SQL statement string",
				"example": "SELECT quote_literal('a''b');",
				"returns": "text",
				"parameters": {
					"string": "text"
				}
			},
			{
				"description": "Converts the given value to text and then quotes it as a literal",
				"example": "SELECT quote_literal(42.5)",
				"returns": "text",
				"parameters": {
					"element": "anyelement "
				}
			}
		],
		"quote_nullable": [
			{
				"description": "Returns the given string suitably quoted to be used as a string literal in an SQL statement string; or, if the argument is null, returns NULL",
				"example": "SELECT quote_nullable('a''b');",
				"returns": "text",
				"parameters": {
					"string": "text"
				}
			},
			{
				"description": "Converts the given value to text and then quotes it as a literal",
				"example": "SELECT quote_nullable(42.5)",
				"returns": "text",
				"parameters": {
					"element": "anyelement "
				}
			}
		],
		"regexp_match": [
			{
				"description": "Returns captured substrings resulting from the first match of a POSIX regular expression to the string",
				"example": "SELECT regexp_match('ABCdefABC', 'ABC');",
				"returns": "text[]",
				"parameters": {
					"string": "text",
					"pattern": "text",
					"flags": "text"
				}
			}
		],
		"regexp_matches": [
			{
				"description": "Returns captured substrings resulting from the first match of a POSIX regular expression to the string, or multiple matches if the g flag is used",
				"example": "SELECT regexp_matches('foobarbequebaz', 'ba.', 'g');",
				"returns": "setof text[]",
				"parameters": {
					"string": "text",
					"pattern": "text",
					"flags": "text"
				}
			}
		],
		"regexp_replace": [
			{
				"description": "Replaces substrings resulting from the first match of a POSIX regular expression, or multiple substring matches if the g flag is used",
				"example": "SELECT regexp_replace('ABCdefABC', 'ABC', 'xxx');",
				"returns": "text",
				"parameters": {
					"string": "text",
					"pattern": "text",
					"replacement": "text",
					"flags": "text"
				}
			}
		],
		"regexp_split_to_array": [
			{
				"description": "Splits string using a POSIX regular expression as the delimiter, producing an array of results",
				"example": "SELECT regexp_split_to_array('ABCdefABC', 'ABC');",
				"returns": "text[]",
				"parameters": {
					"string": "text",
					"pattern": "text",
					"flags": "text"
				}
			}
		],
		"regexp_split_to_table": [
			{
				"description": "Splits string using a POSIX regular expression as the delimiter, producing a set of results",
				"example": "SELECT regexp_split_to_table('ABCdefABC', 'ABC');",
				"returns": "setof text",
				"parameters": {
					"string": "text",
					"pattern": "text",
					"flags": "text"
				}
			}
		],
		"repeat": [
			{
				"description": "Repeats string the specified number of times",
				"example": "SELECT repeat('ABC', 3);",
				"returns": "text",
				"parameters": {
					"string": "text",
					"count": "integer"
				}
			}
		],
		"replace": [
			{
				"description": "Replaces all occurrences in string of substring from with substring to",
				"example": "SELECT replace('ABCdefABC', 'ABC', 'xxx');",
				"returns": "text",
				"parameters": {
					"string": "text",
					"from": "text",
					"to": "text"
				}
			}
		],
		"reverse": [
			{
				"description": "Reverses the order of the characters in the string",
				"example": "SELECT reverse('ABCdefABC');",
				"returns": "text",
				"parameters": {
					"string": "text"
				}
			}
		],
		"right": [
			{
				"description": "Extract substring",
				"example": "SELECT right('ABCdef', 3);",
				"returns": "text",
				"parameters": {
					"string": "text",
					"count": "integer"
				}
			}
		],
		"rpad": [
			{
				"description": "Pad string to length length by appending the characters fill (a space by default)",
				"example": "SELECT rpad('ABC', 5, 'x');",
				"returns": "text",
				"parameters": {
					"string": "text",
					"length": "integer",
					"fill": "text"
				}
			}
		],
		"rtrim": [
			{
				"description": "Remove the longest string containing only characters from characters (a space by default) from the end of string",
				"example": "SELECT rtrim('ABCdefABC', 'ABC');",
				"returns": "text",
				"parameters": {
					"string": "text",
					"characters": "text"
				}
			}
		],
		"split_part": [
			{
				"description": "Splits string at occurrences of delimiter and returns the n'th field (counting from one), or when n is negative, returns the |n|'th-from-last field",
				"example": "SELECT split_part('ABC:def:ghi', ':', 2);",
				"returns": "text",
				"parameters": {
					"string": "text",
					"delimiter": "text",
					"n": "integer"
				}
			}
		],
		"strpos": [
			{
				"description": "Returns first starting index of the specified substring within string, or zero if it's not present",
				"example": "SELECT strpos('ABCdefABC', 'def');",
				"returns": "integer",
				"parameters": {
					"string": "text",
					"substring": "text"
				}
			}
		],
		"substr": [
			{
				"description": "Extracts the substring of string starting at the start'th character, and extending for count characters if that is specified",
				"example": "SELECT substr('ABCdefABC', 4, 3);",
				"returns": "text",
				"parameters": {
					"string": "text",
					"start": "integer",
					"count": "integer"
				}
			}
		],
		"starts_with": [
			{
				"description": "Returns true if string starts with prefix",
				"example": "SELECT starts_with('ABCdefABC', 'ABC');",
				"returns": "boolean",
				"parameters": {
					"string": "text",
					"prefix": "text"
				}
			}
		],
		"string_to_array": [
			{
				"description": "Splits the string at occurrences of delimiter and forms the resulting fields into a text array",
				"example": "SELECT string_to_array('ABC:def:ghi', ':');",
				"returns": "text[]",
				"parameters": {
					"string": "text",
					"delimiter": "text"
				}
			}
		],
		"string_to_table": [
			{
				"description": "Splits the string at occurrences of delimiter and returns the resulting fields as a set of text rows",
				"example": "SELECT string_to_table('ABC:def:ghi', ':');",
				"returns": "setof text",
				"parameters": {
					"string": "text",
					"delimiter": "text"
				}
			}
		],
		"to_ascii": [
			{
				"description": "Converts string to ASCII from database encoding",
				"example": "SELECT to_ascii('A');",
				"returns": "text",
				"parameters": {
					"string": "text"
				}
			},
			{
				"description": "Converts string to ASCII from another encoding, which may be identified by name",
				"example": "SELECT to_ascii('ABC', 'UTF8');",
				"returns": "text",
				"parameters": {
					"string": "text",
					"encoding": "text"
				}
			},
			{
				"description": "Converts string to ASCII from another encoding, which may be identified by number",
				"example": "SELECT to_ascii('ABC', 6);",
				"returns": "text",
				"parameters": {
					"string": "text",
					"encoding": "integer"
				}
			}
		],
		"to_hex": [
			{
				"description": "Converts the number to its equivalent hexadecimal representation.",
				"example": "SELECT to_hex(2147483647);",
				"returns": "text",
				"parameters": {
					"number": "integer"
				}
			},
			{
				"description": "Converts the number to its equivalent hexadecimal representation.",
				"example": "SELECT to_hex(2147483647);",
				"returns": "text",
				"parameters": {
					"number": "bigint"
				}
			}
		],
		"translate": [
			{
				"description": "Replaces each character in string that matches a character in the from set with the corresponding character in the to set",
				"example": "SELECT translate('ABCdefABC', 'ABC', 'xxx');",
				"returns": "text",
				"parameters": {
					"string": "text",
					"from": "text",
					"to": "text"
				}
			}
		],
		"unistr": [
			{
				"description": "Evaluate escaped Unicode characters in the argument",
				"example": "SELECT unistr('d\\0061t\\+000061')",
				"returns": "text",
				"parameters": {
					"string": "text"
				}
			}
		]
	}
}
