[
  {
    "description": "Comparison Functions see https://www.postgresql.org/docs/14/functions-comparison.html#FUNCTIONS-COMPARISON-FUNC-TABLE",
    "keywords": [
      {
        "keyword": "num_nonnulls",
        "description": "Number of non-null arguments",
        "example": "SELECT num_nonnulls(1, NULL, 2);",
        "returns": "integer",
        "parameters": [
          {
            "name": "arg",
            "type": "variadic any element"
          }
        ]
      },
      {
        "keyword": "num_nulls",
        "description": "Number of null arguments",
        "example": "SELECT num_nulls(1, NULL, 2);",
        "returns": "integer",
        "parameters": [
          {
            "name": "arg",
            "type": "variadic any element"
          }
        ]
      }
    ]
  },
  {
    "description": "Mathematical Functions see https://www.postgresql.org/docs/14/functions-math.html#FUNCTIONS-MATH-FUNC-TABLE",
    "keywords": [
      {
        "keyword": "abs",
        "description": "Asolute value",
        "example": "SELECT abs(-17.4);",
        "returns": "numeric_type",
        "parameters": [
          {
            "name": "number",
            "type": "numeric_type"
          }
        ]
      },
      {
        "keyword": "cbrt",
        "description": "Cube root",
        "example": "SELECT cbrt(27.0);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "ceil",
        "description": "Nearest integer greater than or equal to argument",
        "example": "SELECT ceil(-8.4);",
        "returns": "numeric or double precision",
        "parameters": [
          {
            "name": "number",
            "type": "numeric or double precision"
          }
        ]
      },
      {
        "keyword": "ceiling",
        "description": "Nearest integer greater than or equal to argument",
        "example": "SELECT ceiling(-8.4);",
        "returns": "numeric or double precision",
        "parameters": [
          {
            "name": "number",
            "type": "numeric or double precision"
          }
        ]
      },
      {
        "keyword": "degrees",
        "description": "Converts radians to degrees",
        "example": "SELECT degrees(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "radians",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "div",
        "description": "Integer quotient of y/x (truncates towards zero)",
        "example": "SELECT div(5, 2);",
        "returns": "numeric",
        "parameters": [
          {
            "name": "y",
            "type": "numeric"
          },
          {
            "name": "x",
            "type": "numeric"
          }
        ]
      },
      {
        "keyword": "exp",
        "description": "Exponential (e raised to the given power)",
        "example": "SELECT exp(1.0);",
        "returns": "numeric or double precision",
        "parameters": [
          {
            "name": "power",
            "type": "numeric or double precision"
          }
        ]
      },
      {
        "keyword": "factorial",
        "description": "Factorial",
        "example": "SELECT factorial(5);",
        "returns": "numeric",
        "parameters": [
          {
            "name": "number",
            "type": "bigint"
          }
        ]
      },
      {
        "keyword": "floor",
        "description": "Nearest integer less than or equal to argument",
        "example": "SELECT floor(-8.4);",
        "returns": "numeric or double precision",
        "parameters": [
          {
            "name": "number",
            "type": "numeric or double precision"
          }
        ]
      },
      {
        "keyword": "gcd",
        "description": "Greatest common divisor (the largest positive number that divides both inputs with no remainder); returns 0 if both inputs are zero; available for integer, bigint, and numeric",
        "example": "SELECT gcd(1071, 1029);",
        "returns": "numeric_type",
        "parameters": [
          {
            "name": "a",
            "type": "numeric_type"
          },
          {
            "name": "b",
            "type": "numeric_type"
          }
        ]
      },
      {
        "keyword": "lcm",
        "description": "Least common multiple (the smallest strictly positive number that is an integral multiple of both inputs); returns 0 if either input is zero; available for integer, bigint, and numeric",
        "example": "SELECT lcm(1071, 1029);",
        "returns": "numeric_type",
        "parameters": [
          {
            "name": "a",
            "type": "numeric_type"
          },
          {
            "name": "b",
            "type": "numeric_type"
          }
        ]
      },
      {
        "keyword": "ln",
        "description": "Natural logarithm",
        "example": "SELECT ln(2.0);",
        "returns": "numeric or double precision",
        "parameters": [
          {
            "name": "number",
            "type": "numeric or double precision"
          }
        ]
      },
      {
        "keyword": "log",
        "description": "Base 10 logarithm",
        "example": "SELECT log(1000.0);",
        "returns": "numeric",
        "parameters": [
          {
            "name": "number",
            "type": "numeric"
          }
        ]
      },
      {
        "keyword": "log",
        "description": "Logarithm of x to base b",
        "example": "SELECT log(2.0, 64.0);",
        "returns": "numeric",
        "parameters": [
          {
            "name": "b",
            "type": "numeric"
          },
          {
            "name": "x",
            "type": "numeric"
          }
        ]
      },
      {
        "keyword": "log10",
        "description": "Base 10 logarithm (same as log)",
        "example": "SELECT log10(1000.0);",
        "returns": "numeric",
        "parameters": [
          {
            "name": "number",
            "type": "numeric"
          }
        ]
      },
      {
        "keyword": "min_scale",
        "description": "Minimum scale of the argument (the number of decimal digits in the fractional part)",
        "example": "SELECT min_scale(123.45);",
        "returns": "integer",
        "parameters": [
          {
            "name": "number",
            "type": "numeric"
          }
        ]
      },
      {
        "keyword": "mod",
        "description": "Remainder of y/x; available for smallint, integer, bigint, and numeric",
        "example": "SELECT mod(5, 2);",
        "returns": "numeric_type",
        "parameters": [
          {
            "name": "y",
            "type": "numeric_type"
          },
          {
            "name": "x",
            "type": "numeric_type"
          }
        ]
      },
      {
        "keyword": "pi",
        "description": "Approximate value of π",
        "example": "SELECT pi();",
        "returns": "double precision",
        "parameters": []
      },
      {
        "keyword": "power",
        "description": "a raised to the power of b",
        "example": "SELECT power(2.0, 3.0);",
        "returns": "numeric or double precision",
        "parameters": [
          {
            "name": "a",
            "type": "numeric or double precision"
          },
          {
            "name": "b",
            "type": "numeric or double precision"
          }
        ]
      },
      {
        "keyword": "radians",
        "description": "Converts degrees to radians",
        "example": "SELECT radians(90.0);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "degrees",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "round",
        "description": "Rounds to nearest integer. For numeric, ties are broken by rounding away from zero. For double precision, the tie-breaking behavior is platform dependent, but “round to nearest even” is the most common rule.",
        "example": "SELECT round(123.456);",
        "returns": "numeric or double precision",
        "parameters": [
          {
            "name": "number",
            "type": "numeric or double precision"
          }
        ]
      },
      {
        "keyword": "scale",
        "description": "Scale of the argument (the number of decimal digits in the fractional part)",
        "example": "SELECT scale(123.45);",
        "returns": "integer",
        "parameters": [
          {
            "name": "number",
            "type": "numeric"
          }
        ]
      },
      {
        "keyword": "sign",
        "description": "Sign of the argument (-1, 0, or +1)",
        "example": "SELECT sign(-8.4);",
        "returns": "numeric or double precision",
        "parameters": [
          {
            "name": "number",
            "type": "numeric or double precision"
          }
        ]
      },
      {
        "keyword": "sqrt",
        "description": "Square root",
        "example": "SELECT sqrt(2.0);",
        "returns": "numeric or double precision",
        "parameters": [
          {
            "name": "number",
            "type": "numeric or double precision"
          }
        ]
      },
      {
        "keyword": "trim_scale",
        "description": "Reduces the value's scale (number of fractional decimal digits) by removing trailing zeroes",
        "example": "SELECT trim_scale(123.4500);",
        "returns": "numeric",
        "parameters": [
          {
            "name": "number",
            "type": "numeric"
          }
        ]
      },
      {
        "keyword": "trunc",
        "description": "Truncates to integer (towards zero)",
        "example": "SELECT trunc(-8.4);",
        "returns": "numeric or double precision",
        "parameters": [
          {
            "name": "number",
            "type": "numeric or double precision"
          }
        ]
      },
      {
        "keyword": "trunc",
        "description": "Truncates to specified number of decimal places",
        "example": "SELECT trunc(123.456, 2);",
        "returns": "numeric or double precision",
        "parameters": [
          {
            "name": "number",
            "type": "numeric or double precision"
          },
          {
            "name": "decimal_places",
            "type": "integer"
          }
        ]
      },
      {
        "keyword": "width_bucket",
        "description": "Returns the number of the bucket in which operand falls in a histogram having count equal-width buckets spanning the range low to high. Returns 0 or count+1 for an input outside that range.",
        "example": "SELECT width_bucket(5.35, 0.024, 10.06, 5);",
        "returns": "integer",
        "parameters": [
          {
            "name": "operand",
            "type": "numeric or double precision"
          },
          {
            "name": "low",
            "type": "numeric or double precision"
          },
          {
            "name": "high",
            "type": "numeric or double precision"
          },
          {
            "name": "count",
            "type": "integer"
          }
        ]
      },
      {
        "keyword": "width_bucket",
        "description": "Returns the number of the bucket in which operand falls given an array listing the lower bounds of the buckets.",
        "example": "SELECT width_bucket(5.35, ARRAY[0.024, 10.06, 20.0, 100.0]);",
        "returns": "integer",
        "parameters": [
          {
            "name": "operand",
            "type": "anycompatible"
          },
          {
            "name": "thresholds",
            "type": "anycompatiblearray"
          }
        ]
      }
    ]
  },
  {
    "description": "Random Functions see https://www.postgresql.org/docs/14/functions-math.html#FUNCTIONS-MATH-RANDOM-TABLE",
    "keywords": [
      {
        "keyword": "random",
        "description": "Returns a random value in the range 0.0 <= x < 1.0",
        "example": "SELECT random();",
        "returns": "double precision",
        "parameters": []
      },
      {
        "keyword": "setseed",
        "description": "Sets the seed for subsequent random() calls; argument must be between -1.0 and 1.0, inclusive",
        "example": "SELECT setseed(0.5);",
        "returns": "void",
        "parameters": [
          {
            "name": "seed",
            "type": "double precision"
          }
        ]
      }
    ]
  },
  {
    "description": "Trigonometric Functions see https://www.postgresql.org/docs/14/functions-math.html#FUNCTIONS-MATH-TRIG-TABLE",
    "keywords": [
      {
        "keyword": "acos",
        "description": "Arc cosine, result in radians",
        "example": "SELECT acos(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "acosd",
        "description": "Arc cosine, result in degrees",
        "example": "SELECT acosd(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "asin",
        "description": "Arc sine, result in radians",
        "example": "SELECT asin(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "asind",
        "description": "Arc sine, result in degrees",
        "example": "SELECT asind(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "atan",
        "description": "Arc tangent, result in radians",
        "example": "SELECT atan(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "atand",
        "description": "Arc tangent, result in degrees",
        "example": "SELECT atand(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "atan2",
        "description": "Arc tangent of y/x, result in radians",
        "example": "SELECT atan2(1.0, 1.0);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "y",
            "type": "double precision"
          },
          {
            "name": "x",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "atan2d",
        "description": "Arc tangent of y/x, result in degrees",
        "example": "SELECT atan2d(1.0, 1.0);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "y",
            "type": "double precision"
          },
          {
            "name": "x",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "cos",
        "description": "Cosine, argument in radians",
        "example": "SELECT cos(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "cosd",
        "description": "Cosine, argument in degrees",
        "example": "SELECT cosd(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "cot",
        "description": "Cotangent, argument in radians",
        "example": "SELECT cot(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "cotd",
        "description": "Cotangent, argument in degrees",
        "example": "SELECT cotd(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "sin",
        "description": "Sine, argument in radians",
        "example": "SELECT sin(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "sind",
        "description": "Sine, argument in degrees",
        "example": "SELECT sind(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "tan",
        "description": "Tangent, argument in radians",
        "example": "SELECT tan(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "tand",
        "description": "Tangent, argument in degrees",
        "example": "SELECT tand(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      }
    ]
  },
  {
    "description": "Hyperbolic Functions see https://www.postgresql.org/docs/14/functions-math.html#FUNCTIONS-MATH-HYP-TABLE",
    "keywords": [
      {
        "keyword": "sinh",
        "description": "Hyperbolic sine",
        "example": "SELECT sinh(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "cosh",
        "description": "Hyperbolic cosine",
        "example": "SELECT cosh(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "tanh",
        "description": "Hyperbolic tangent",
        "example": "SELECT tanh(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "asinh",
        "description": "Inverse hyperbolic sine",
        "example": "SELECT asinh(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "acosh",
        "description": "Inverse hyperbolic cosine",
        "example": "SELECT acosh(1.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      },
      {
        "keyword": "atanh",
        "description": "Inverse hyperbolic tangent",
        "example": "SELECT atanh(0.5);",
        "returns": "double precision",
        "parameters": [
          {
            "name": "number",
            "type": "double precision"
          }
        ]
      }
    ]
  },
  {
    "description": "String Functions see https://www.postgresql.org/docs/14/functions-string.html#FUNCTIONS-STRING-SQL",
    "keywords": [
      {
        "keyword": "bit_length",
        "description": "Number of bits in string",
        "example": "SELECT bit_length('ABC');",
        "returns": "integer",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "char_length",
        "description": "Number of characters in string",
        "example": "SELECT char_length('ABC');",
        "returns": "integer",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "character_length",
        "description": "Synonym for char_length",
        "example": "SELECT character_length('ABC');",
        "returns": "integer",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "lower",
        "description": "Convert string to lower case",
        "example": "SELECT lower('ABC');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "normalize",
        "description": "Convert string to specified Unicode normalization form",
        "example": "SELECT normalize('ABC', 'NFC');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "form",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "octet_length",
        "description": "Number of bytes in string",
        "example": "SELECT octet_length('ABC');",
        "returns": "integer",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "overlay",
        "description": "Replace substring with another string at specified position and length",
        "example": "SELECT overlay('ABCdef' PLACING 'xxx' FROM 4 FOR 3);",
        "snippet": ["overlay(${1:string} PLACING ${2:replacing} FROM ${3:start} FOR ${4:count})"],
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "replacing",
            "type": "text"
          },
          {
            "name": "from",
            "type": "integer"
          },
          {
            "name": "for",
            "type": "integer",
            "optional": true
          }
        ]
      },
      {
        "keyword": "position",
        "description": "Location of specified substring",
        "example": "SELECT position('def' IN 'ABCdef');",
        "snippet": ["position(${1:substring} IN ${2:string})"],
        "returns": "integer",
        "parameters": [
          {
            "name": "substring",
            "type": "text"
          },
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "substring",
        "description": "Extract substring",
        "example": "SELECT substring('ABCdef' FROM 4 FOR 3);",
        "snippet": ["substring(${1:string} FROM ${2:from} FOR ${3:for})"],
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "from",
            "type": "integer"
          },
          {
            "name": "for",
            "type": "integer",
            "optional": true
          }
        ]
      },
      {
        "keyword": "trim",
        "description": "Remove leading and trailing characters",
        "example": "SELECT trim('ABC' FROM 'ABCdefABC');",
        "snippet": ["trim(${1:characters} FROM ${2:string})"],
        "returns": "text",
        "parameters": [
          {
            "name": "characters",
            "type": "text"
          },
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "upper",
        "description": "Convert string to upper case",
        "example": "SELECT upper('ABC');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      }
    ]
  },
  {
    "description": "Additional string functions see https://www.postgresql.org/docs/14/functions-string.html#FUNCTIONS-STRING-OTHER",
    "keywords": [
      {
        "keyword": "ascii",
        "description": "Convert first character to its numeric code",
        "example": "SELECT ascii('ABC');",
        "returns": "integer",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "btrim",
        "description": "Remove the longest string containing only characters from characters (a space by default) from the start and end of string",
        "example": "SELECT btrim('ABCdefABC', 'ABC');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "characters",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "chr",
        "description": "Convert integer to character",
        "example": "SELECT chr(65);",
        "returns": "text",
        "parameters": [
          {
            "name": "integer",
            "type": "integer"
          }
        ]
      },
      {
        "keyword": "concat",
        "description": "Concatenate string representations of all arguments",
        "example": "SELECT concat('ABC', 'def');",
        "returns": "text",
        "parameters": [
          {
            "name": "value",
            "type": "any[]"
          }
        ]
      },
      {
        "keyword": "concat_ws",
        "description": "Concatenate with separator",
        "example": "SELECT concat_ws(',', 'ABC', 'def');",
        "returns": "text",
        "parameters": [
          {
            "name": "separator",
            "type": "text"
          },
          {
            "name": "value",
            "type": "any[]"
          }
        ]
      },
      {
        "keyword": "format",
        "description": "Format arguments according to a format string",
        "example": "SELECT format('Hello, %s', 'world');",
        "returns": "text",
        "parameters": [
          {
            "name": "format",
            "type": "text"
          },
          {
            "name": "value",
            "type": "any[]"
          }
        ]
      },
      {
        "keyword": "initcap",
        "description": "Convert first letter of each word to upper case and the rest to lower case",
        "example": "SELECT initcap('ABC def');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "left",
        "description": "Extract substring",
        "example": "SELECT left('ABCdef', 3);",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "count",
            "type": "integer"
          }
        ]
      },
      {
        "keyword": "length",
        "description": "Number of characters in string",
        "example": "SELECT length('ABC');",
        "returns": "integer",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "lpad",
        "description": "Pad string to length length by prepending the characters fill (a space by default)",
        "example": "SELECT lpad('ABC', 5, 'x');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "length",
            "type": "integer"
          },
          {
            "name": "fill",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "ltrim",
        "description": "Remove the longest string containing only characters from characters (a space by default) from the start of string",
        "example": "SELECT ltrim('ABCdefABC', 'ABC');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "characters",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "md5",
        "description": "Compute MD5 hash",
        "example": "SELECT md5('ABC');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "parse_ident",
        "description": "Split qualified_identifier into an array of identifiers, removing any quoting of individual identifiers",
        "example": "SELECT parse_ident('\"a\".\"b\"');",
        "returns": "text[]",
        "parameters": [
          {
            "name": "qualified_identifier",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "quote_ident",
        "description": "Returns the given string suitably quoted to be used as an identifier in an SQL statement string",
        "example": "SELECT quote_ident('a.b');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "quote_literal",
        "description": "Returns the given string suitably quoted to be used as a string literal in an SQL statement string",
        "example": "SELECT quote_literal('a''b');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "quote_nullable",
        "description": "Returns the given string suitably quoted to be used as a string literal in an SQL statement string; or, if the argument is null, returns NULL",
        "example": "SELECT quote_nullable('a''b');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "regexp_match",
        "description": "Returns captured substrings resulting from the first match of a POSIX regular expression to the string",
        "example": "SELECT regexp_match('ABCdefABC', 'ABC');",
        "returns": "text[]",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "pattern",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "regexp_matches",
        "description": "Returns captured substrings resulting from the first match of a POSIX regular expression to the string, or multiple matches if the g flag is used",
        "example": "SELECT regexp_matches('ABCdefABC', 'ABC');",
        "returns": "setof text[]",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "pattern",
            "type": "text"
          },
          {
            "name": "flags",
            "type": "text",
            "optional": true
          }
        ]
      },
      {
        "keyword": "regexp_replace",
        "description": "Replaces substrings resulting from the first match of a POSIX regular expression, or multiple substring matches if the g flag is used",
        "example": "SELECT regexp_replace('ABCdefABC', 'ABC', 'xxx');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "pattern",
            "type": "text"
          },
          {
            "name": "replacement",
            "type": "text"
          },
          {
            "name": "flags",
            "type": "text",
            "optional": true
          }
        ]
      },
      {
        "keyword": "regexp_split_to_array",
        "description": "Splits string using a POSIX regular expression as the delimiter, producing an array of results",
        "example": "SELECT regexp_split_to_array('ABCdefABC', 'ABC');",
        "returns": "text[]",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "pattern",
            "type": "text"
          },
          {
            "name": "flags",
            "type": "text",
            "optional": true
          }
        ]
      },
      {
        "keyword": "regexp_split_to_table",
        "description": "Splits string using a POSIX regular expression as the delimiter, producing a set of results",
        "example": "SELECT regexp_split_to_table('ABCdefABC', 'ABC');",
        "returns": "setof text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "pattern",
            "type": "text"
          },
          {
            "name": "flags",
            "type": "text",
            "optional": true
          }
        ]
      },
      {
        "keyword": "repeat",
        "description": "Repeats string the specified number of times",
        "example": "SELECT repeat('ABC', 3);",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "count",
            "type": "integer"
          }
        ]
      },
      {
        "keyword": "replace",
        "description": "Replaces all occurrences in string of substring from with substring to",
        "example": "SELECT replace('ABCdefABC', 'ABC', 'xxx');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "from",
            "type": "text"
          },
          {
            "name": "to",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "reverse",
        "description": "Reverses the order of the characters in the string",
        "example": "SELECT reverse('ABCdefABC');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "right",
        "description": "Extract substring",
        "example": "SELECT right('ABCdef', 3);",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "count",
            "type": "integer"
          }
        ]
      },
      {
        "keyword": "rpad",
        "description": "Pad string to length length by appending the characters fill (a space by default)",
        "example": "SELECT rpad('ABC', 5, 'x');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "length",
            "type": "integer"
          },
          {
            "name": "fill",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "rtrim",
        "description": "Remove the longest string containing only characters from characters (a space by default) from the end of string",
        "example": "SELECT rtrim('ABCdefABC', 'ABC');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "characters",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "split_part",
        "description": "Splits string at occurrences of delimiter and returns the n'th field (counting from one), or when n is negative, returns the |n|'th-from-last field",
        "example": "SELECT split_part('ABC:def:ghi', ':', 2);",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "delimiter",
            "type": "text"
          },
          {
            "name": "n",
            "type": "integer"
          }
        ]
      },
      {
        "keyword": "strpos",
        "description": "Returns first starting index of the specified substring within string, or zero if it's not present",
        "example": "SELECT strpos('ABCdefABC', 'def');",
        "returns": "integer",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "substring",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "substr",
        "description": "Extracts the substring of string starting at the start'th character, and extending for count characters if that is specified",
        "example": "SELECT substr('ABCdefABC', 4, 3);",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "start",
            "type": "integer"
          },
          {
            "name": "count",
            "type": "integer",
            "optional": true
          }
        ]
      },
      {
        "keyword": "starts_with",
        "description": "Returns true if string starts with prefix",
        "example": "SELECT starts_with('ABCdefABC', 'ABC');",
        "returns": "boolean",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "prefix",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "string_to_array",
        "description": "Splits the string at occurrences of delimiter and forms the resulting fields into a text array",
        "example": "SELECT string_to_array('ABC:def:ghi', ':');",
        "returns": "text[]",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "delimiter",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "string_to_table",
        "description": "Splits the string at occurrences of delimiter and returns the resulting fields as a set of text rows",
        "example": "SELECT string_to_table('ABC:def:ghi', ':');",
        "returns": "setof text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "delimiter",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "to_ascii",
        "description": "Converts string to ASCII from another encoding, which may be identified by name or number",
        "example": "SELECT to_ascii('ABC', 'UTF8');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "encoding",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "to_hex",
        "description": "Converts the number to its equivalent hexadecimal representation",
        "example": "SELECT to_hex(2147483647);",
        "returns": "text",
        "parameters": [
          {
            "name": "number",
            "type": "integer"
          }
        ]
      },
      {
        "keyword": "translate",
        "description": "Replaces each character in string that matches a character in the from set with the corresponding character in the to set",
        "example": "SELECT translate('ABCdefABC', 'ABC', 'xxx');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          },
          {
            "name": "from",
            "type": "text"
          },
          {
            "name": "to",
            "type": "text"
          }
        ]
      },
      {
        "keyword": "unistr",
        "description": "Evaluate escaped Unicode characters in the argument",
        "example": "SELECT unistr('U+0061');",
        "returns": "text",
        "parameters": [
          {
            "name": "string",
            "type": "text"
          }
        ]
      }
    ]
  },
  {
    "description": "Binary String Functions see https://www.postgresql.org/docs/14/functions-binarystring.html#FUNCTIONS-BINARYSTRING-OTHER",
    "keywords": [
      {
        "keyword": "bit_count",
        "description": "Number of bits set in the argument"
      },
      {
        "keyword": "get_bit",
        "description": "Extracts the n'th bit from string"
      },
      {
        "keyword": "get_byte",
        "description": "Extracts the n'th byte from string"
      },
      {
        "keyword": "set_bit",
        "description": "Sets the n'th bit in string to newvalue"
      },
      {
        "keyword": "set_byte",
        "description": "Sets the n'th byte in string to newvalue"
      },
      {
        "keyword": "sha224",
        "description": "Compute SHA-224 hash"
      },
      {
        "keyword": "sha256",
        "description": "Compute SHA-256 hash"
      },
      {
        "keyword": "sha384",
        "description": "Compute SHA-384 hash"
      },
      {
        "keyword": "sha512",
        "description": "Compute SHA-512 hash"
      }
    ]
  },
  {
    "description": "String conversion functions see https://www.postgresql.org/docs/14/functions-binarystring.html#FUNCTIONS-BINARYSTRING-CONVERSIONS",
    "keywords": [
      {
        "keyword": "convert",
        "description": "Converts a binary string representing text in encoding src_encoding to a binary string in encoding dest_encoding"
      },
      {
        "keyword": "convert_from",
        "description": "Converts a binary string representing text in encoding src_encoding to text in the database encoding"
      },
      {
        "keyword": "convert_to",
        "description": "Converts a text string (in the database encoding) to a binary string encoded in encoding dest_encoding"
      },
      {
        "keyword": "encode",
        "description": "Encodes binary data into a textual representation"
      },
      {
        "keyword": "decode",
        "description": "Decodes binary data from a textual representation"
      }
    ]
  },
  {
    "description": "Formatting Functions see https://www.postgresql.org/docs/14/functions-formatting.html#FUNCTIONS-FORMATTING-TABLE",
    "keywords": [
      {
        "keyword": "to_char",
        "description": "Converts number to a string according to the given format"
      },
      {
        "keyword": "to_date",
        "description": "Converts string to date"
      },
      {
        "keyword": "to_number",
        "description": "Converts string to number"
      },
      {
        "keyword": "to_timestamp",
        "description": "Converts string to timestamp with time zone"
      }
    ]
  },
  {
    "description": "Date/Time Functions see https://www.postgresql.org/docs/14/functions-datetime.html",
    "keywords": [
      {
        "keyword": "age",
        "description": "Subtract arguments, producing a “symbolic” result that uses years and months, rather than just days"
      },
      {
        "keyword": "clock_timestamp",
        "description": "Current date and time (changes during statement execution)"
      },
      {
        "keyword": "current_date",
        "description": "Current date"
      },
      {
        "keyword": "current_time",
        "description": "Current time of day"
      },
      {
        "keyword": "current_timestamp",
        "description": "Current date and time (start of current transaction)"
      },
      {
        "keyword": "date_bin",
        "description": "Bin input into specified interval aligned with specified origin"
      },
      {
        "keyword": "date_part",
        "description": "Get subfield (equivalent to extract)"
      },
      {
        "keyword": "date_trunc",
        "description": "Truncate to specified precision"
      },
      {
        "keyword": "extract",
        "description": "Get subfield"
      },
      {
        "keyword": "isfinite",
        "description": "Test for finite date (not +/-infinity)"
      },
      {
        "keyword": "justify_days",
        "description": "Adjust interval so 30-day time periods are represented as months"
      },
      {
        "keyword": "justify_hours",
        "description": "Adjust interval so 24-hour time periods are represented as days"
      },
      {
        "keyword": "justify_interval",
        "description": "Adjust interval using justify_days and justify_hours, with additional sign adjustments"
      },
      {
        "keyword": "localtime",
        "description": "Current time of day"
      },
      {
        "keyword": "localtimestamp",
        "description": "Current date and time (start of current transaction)"
      },
      {
        "keyword": "make_date",
        "description": "Create date from year, month and day fields (negative years signify BC)"
      },
      {
        "keyword": "make_interval",
        "description": "Create interval from years, months, weeks, days, hours, minutes and seconds fields, each of which can default to zero"
      },
      {
        "keyword": "make_time",
        "description": "Create time from hour, minute and seconds fields"
      },
      {
        "keyword": "make_timestamp",
        "description": "Create timestamp from year, month, day, hour, minute and seconds fields (negative years signify BC)"
      },
      {
        "keyword": "make_timestamptz",
        "description": "Create timestamp with time zone from year, month, day, hour, minute and seconds fields (negative years signify BC)."
      },
      {
        "keyword": "now",
        "description": "Current date and time (start of current transaction)"
      },
      {
        "keyword": "statement_timestamp",
        "description": "Current date and time (start of current statement)"
      },
      {
        "keyword": "timeofday",
        "description": "Current date and time (like clock_timestamp, but as a text string)"
      },
      {
        "keyword": "transaction_timestamp",
        "description": "Current date and time (start of current transaction)"
      }
    ]
  },
  {
    "description": "Enum support functions see https://www.postgresql.org/docs/14/functions-enum.html#FUNCTIONS-ENUM-SUPPORT",
    "keywords": [
      {
        "keyword": "enum_first",
        "description": "Returns the first value of an enum type"
      },
      {
        "keyword": "enum_last",
        "description": "Returns the last value of an enum type"
      },
      {
        "keyword": "enum_range",
        "description": "Returns a range of values of an enum type"
      }
    ]
  },
  {
    "description": "Geometric Functions see https://www.postgresql.org/docs/14/functions-geometry.html",
    "keywords": [
      {
        "keyword": "area",
        "description": "Computes area"
      },
      {
        "keyword": "center",
        "description": "Computes center point"
      },
      {
        "keyword": "diagonal",
        "description": "Extracts box's diagonal as a line segment (same as lseg(box))"
      },
      {
        "keyword": "diameter",
        "description": "Computes diameter of circle"
      },
      {
        "keyword": "height",
        "description": "Computes vertical size of box"
      },
      {
        "keyword": "isclosed",
        "description": "Is path closed?"
      },
      {
        "keyword": "isopen",
        "description": "Is path open?"
      },
      {
        "keyword": "length",
        "description": "Computes the total length"
      },
      {
        "keyword": "npoints",
        "description": "Returns the number of points"
      },
      {
        "keyword": "pclose",
        "description": "Converts path to closed form"
      },
      {
        "keyword": "popen",
        "description": "Converts path to open form"
      },
      {
        "keyword": "radius",
        "description": "Computes radius of circle"
      },
      {
        "keyword": "slope",
        "description": "Computes slope of a line drawn through the two points"
      },
      {
        "keyword": "width",
        "description": "Computes horizontal size of box"
      }
    ]
  },
  {
    "description": "Geometric Type Conversion Functions see https://www.postgresql.org/docs/14/functions-geometry.html",
    "keywords": [
      {
        "keyword": "box",
        "description": "Convert to a box"
      },
      {
        "keyword": "circle",
        "description": "Convert to a circle"
      },
      {
        "keyword": "line",
        "description": "Convert to a line"
      },
      {
        "keyword": "lseg",
        "description": "Convert to a line segment"
      },
      {
        "keyword": "path",
        "description": "Convert to a path"
      },
      {
        "keyword": "point",
        "description": "Convert to a point"
      },
      {
        "keyword": "polygon",
        "description": "Convert to a polygon"
      }
    ]
  },
  {
    "description": "IP Address Functions see https://www.postgresql.org/docs/14/functions-net.html",
    "keywords": [
      {
        "keyword": "abbrev",
        "description": "Creates an abbreviated display format as text"
      },
      {
        "keyword": "broadcast",
        "description": "Computes the broadcast address for the address's network"
      },
      {
        "keyword": "family",
        "description": "Returns the address's family: 4 for IPv4, 6 for IPv6"
      },
      {
        "keyword": "host",
        "description": "Returns the IP address as text, ignoring the netmask"
      },
      {
        "keyword": "hostmask",
        "description": "Computes the host mask for the address's network"
      },
      {
        "keyword": "inet_merge",
        "description": "Computes the smallest network that includes both of the given networks"
      },
      {
        "keyword": "inet_same_family",
        "description": "Tests whether the addresses belong to the same IP family"
      },
      {
        "keyword": "masklen",
        "description": "Returns the netmask length in bits"
      },
      {
        "keyword": "netmask",
        "description": "Computes the network mask for the address's network"
      },
      {
        "keyword": "network",
        "description": "Returns the network part of the address, zeroing out whatever is to the right of the netmask"
      },
      {
        "keyword": "set_masklen",
        "description": "Sets the netmask length for an inet value. The address part does not change"
      },
      {
        "keyword": "text",
        "description": "Returns the unabbreviated IP address and netmask length as text"
      }
    ]
  },
  {
    "description": "MAC Address Functions see https://www.postgresql.org/docs/14/functions-net.html#MACADDR-FUNCTIONS-TABLE",
    "keywords": [
      {
        "keyword": "macaddr8_set7bit",
        "description": "Sets the 7th bit of the address to one, creating what is known as modified EUI-64, for inclusion in an IPv6 address."
      }
    ]
  },
  {
    "description": "Text Search Functions see https://www.postgresql.org/docs/14/functions-textsearch.html",
    "keywords": [
      {
        "keyword": "array_to_tsvector",
        "description": "Converts an array of lexemes to a tsvector"
      },
      {
        "keyword": "get_current_ts_config",
        "description": "Returns the OID of the current default text search configuration (as set by default_text_search_config)"
      },
      {
        "keyword": "numnode",
        "description": "Returns the number of lexemes plus operators in the tsquery"
      },
      {
        "keyword": "plainto_tsquery",
        "description": "Converts text to a tsquery, normalizing words according to the specified or default configuration."
      },
      {
        "keyword": "phraseto_tsquery",
        "description": "Converts text to a tsquery, normalizing words according to the specified or default configuration."
      },
      {
        "keyword": "websearch_to_tsquery",
        "description": "Converts text to a tsquery, normalizing words according to the specified or default configuration."
      },
      {
        "keyword": "querytree",
        "description": "Produces a representation of the indexable portion of a tsquery. A result that is empty or just T indicates a non-indexable query."
      },
      {
        "keyword": "setweight",
        "description": "Assigns the specified weight to each element of the vector."
      },
      {
        "keyword": "strip",
        "description": "Removes positions and weights from the tsvector."
      },
      {
        "keyword": "to_tsquery",
        "description": "Converts text to a tsquery, normalizing words according to the specified or default configuration."
      },
      {
        "keyword": "to_tsvector",
        "description": "Converts text to a tsvector, normalizing words according to the specified or default configuration."
      },
      {
        "keyword": "json_to_tsvector",
        "description": "Selects each item in the JSON document that is requested by the filter and converts each one to a tsvector, normalizing words according to the specified or default configuration."
      },
      {
        "keyword": "jsonb_to_tsvector",
        "description": "Selects each item in the JSON document that is requested by the filter and converts each one to a tsvector, normalizing words according to the specified or default configuration."
      },
      {
        "keyword": "ts_delete",
        "description": "Removes any occurrence of the given lexeme from the vector."
      },
      {
        "keyword": "ts_filter",
        "description": "Selects only elements with the given weights from the vector."
      },
      {
        "keyword": "ts_headline",
        "description": "Displays, in an abbreviated form, the match(es) for the query in the document, which must be raw text not a tsvector."
      },
      {
        "keyword": "ts_rank",
        "description": "Computes a score showing how well the vector matches the query. See Section 12.3.3 for details."
      },
      {
        "keyword": "ts_rank_cd",
        "description": "Computes a score showing how well the vector matches the query, using a cover density algorithm. See Section 12.3.3 for details."
      },
      {
        "keyword": "ts_rewrite",
        "description": "Replaces occurrences of target with substitute within the query. See Section"
      },
      {
        "keyword": "tsquery_phrase",
        "description": "Constructs a phrase query that searches for matches of query1 and query2 at successive lexemes (same as <-> operator)."
      },
      {
        "keyword": "tsvector_to_array",
        "description": "Converts a tsvector to an array of lexemes."
      }
    ]
  },
  {
    "description": "Text search debugging functions see https://www.postgresql.org/docs/14/functions-textsearch.html#TEXTSEARCH-FUNCTIONS-DEBUG-TABLE",
    "keywords": [
      {
        "keyword": "ts_debug",
        "description": "Extracts and normalizes tokens from the document according to the specified or default text search configuration, and returns information about how each token was processed. See Section 12.8.1 for details."
      },
      {
        "keyword": "ts_lexize",
        "description": "Returns an array of replacement lexemes if the input token is known to the dictionary, or an empty array if the token is known to the dictionary but it is a stop word, or NULL if it is not a known word. See Section 12.8.3 for details."
      },
      {
        "keyword": "ts_parse",
        "description": "Extracts tokens from the document using the named parser. See Section 12.8.2 for details."
      },
      {
        "keyword": "ts_token_type",
        "description": "Returns a table that describes each type of token the named parser can recognize. See Section 12.8.2 for details."
      }
    ]
  },
  {
    "description": "UUID Functions see https://www.postgresql.org/docs/14/functions-uuid.html",
    "keywords": [
      {
        "keyword": "gen_random_uuid",
        "description": "Generate a version 4 (random) UUID"
      }
    ]
  },
  {
    "description": "XML Functions see https://www.postgresql.org/docs/14/functions-xml.html",
    "keywords": [
      {
        "keyword": "xmlcomment",
        "description": "Creates an XML comment"
      },
      {
        "keyword": "xmlconcat",
        "description": "Concatenates XML values"
      },
      {
        "keyword": "xmlelement",
        "description": "Creates an XML element"
      },
      {
        "keyword": "xmlforest",
        "description": "Creates an XML forest (sequence) of elements"
      },
      {
        "keyword": "xmlpi",
        "description": "Creates an XML processing instruction"
      },
      {
        "keyword": "xmlagg",
        "description": "Concatenates the input values to the aggregate function call, much like xmlconcat does, except that concatenation occurs across rows rather than across expressions in a single row."
      },
      {
        "keyword": "xmlexists",
        "description": "Evaluates an XPath 1.0 expression (the first argument), with the passed XML value as its context item."
      },
      {
        "keyword": "xml_is_well_formed",
        "description": "Checks whether the argument is a well-formed XML document or fragment."
      },
      {
        "keyword": "xml_is_well_formed_content",
        "description": "Checks whether the argument is a well-formed XML document or fragment, and that it contains no document type declaration."
      },
      {
        "keyword": "xml_is_well_formed_document",
        "description": "Checks whether the argument is a well-formed XML document."
      },
      {
        "keyword": "xpath",
        "description": "Evaluates the XPath 1.0 expression xpath (given as text) against the XML value xml."
      },
      {
        "keyword": "xpath_exists",
        "description": "Evaluates the XPath 1.0 expression xpath (given as text) against the XML value xml, and returns true if the expression selects at least one node, otherwise false."
      },
      {
        "keyword": "xmltable",
        "description": "Expands an XML value into a table whose columns match the rowtype defined by the function's parameter list."
      },
      {
        "keyword": "table_to_xml",
        "description": "Converts a table to XML."
      },
      {
        "keyword": "cursor_to_xml",
        "description": "Converts a cursor to XML."
      }
    ]
  },
  {
    "description": "JSON and JSONB creation functions see https://www.postgresql.org/docs/14/functions-json.html#FUNCTIONS-JSON-CREATION-TABLE",
    "keywords": [
      {
        "keyword": "to_json",
        "description": "Converts any SQL value to JSON."
      },
      {
        "keyword": "to_jsonb",
        "description": "Converts any SQL value to JSONB."
      },
      {
        "keyword": "array_to_json",
        "description": "Converts an SQL array to a JSON array."
      },
      {
        "keyword": "row_to_json",
        "description": "Converts an SQL composite value to a JSON object."
      },
      {
        "keyword": "json_build_array",
        "description": "Builds a possibly-heterogeneously-typed JSON array out of a variadic argument list."
      },
      {
        "keyword": "jsonb_build_array",
        "description": "Builds a possibly-heterogeneously-typed JSON array out of a variadic argument list."
      },
      {
        "keyword": "json_build_object",
        "description": "Builds a JSON object out of a variadic argument list."
      },
      {
        "keyword": "json_object",
        "description": "Builds a JSON object out of a text array."
      },
      {
        "keyword": "jsonb_object",
        "description": "Builds a JSONB object out of a text array."
      }
    ]
  },
  {
    "description": "JSON and JSONB processing functions see https://www.postgresql.org/docs/14/functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE",
    "keywords": [
      {
        "keyword": "json_array_elements",
        "description": "Expands the top-level JSON array into a set of JSON values."
      },
      {
        "keyword": "jsonb_array_elements",
        "description": "Expands the top-level JSON array into a set of JSONB values."
      },
      {
        "keyword": "json_array_elements_text",
        "description": "Expands the top-level JSON array into a set of text values."
      },
      {
        "keyword": "jsonb_array_elements_text",
        "description": "Expands the top-level JSONB array into a set of text values."
      },
      {
        "keyword": "json_array_length",
        "description": "Returns the number of elements in the top-level JSON array."
      },
      {
        "keyword": "jsonb_array_length",
        "description": "Returns the number of elements in the top-level JSONB array."
      },
      {
        "keyword": "json_each",
        "description": "Expands the top-level JSON object into a set of key/value pairs."
      },
      {
        "keyword": "jsonb_each",
        "description": "Expands the top-level JSONB object into a set of key/value pairs."
      },
      {
        "keyword": "json_each_text",
        "description": "Expands the top-level JSON object into a set of key/value pairs. The returned values will be of type text."
      },
      {
        "keyword": "jsonb_each_text",
        "description": "Expands the top-level JSONB object into a set of key/value pairs. The returned values will be of type text."
      },
      {
        "keyword": "json_extract_path",
        "description": "Extracts JSON sub-object at the specified path."
      },
      {
        "keyword": "jsonb_extract_path",
        "description": "Extracts JSONB sub-object at the specified path."
      },
      {
        "keyword": "json_extract_path_text",
        "description": "Extracts JSON sub-object at the specified path as text."
      },
      {
        "keyword": "jsonb_extract_path_text",
        "description": "Extracts JSONB sub-object at the specified path as text."
      },
      {
        "keyword": "json_object_keys",
        "description": "Returns the set of keys in the top-level JSON object."
      },
      {
        "keyword": "jsonb_object_keys",
        "description": "Returns the set of keys in the top-level JSONB object."
      },
      {
        "keyword": "json_populate_record",
        "description": "Expands the top-level JSON object to a row having the composite type of the base argument."
      },
      {
        "keyword": "jsonb_populate_record",
        "description": "Expands the top-level JSON object to a row having the composite type of the base argument."
      },
      {
        "keyword": "json_populate_recordset",
        "description": "Expands the top-level JSON array of objects to a set of rows having the composite type of the base argument."
      },
      {
        "keyword": "jsonb_populate_recordset",
        "description": "Expands the top-level JSONB array of objects to a set of rows having the composite type of the base argument."
      },
      {
        "keyword": "json_to_record",
        "description": "Expands the top-level JSON object to a row having the composite type defined by an AS clause."
      },
      {
        "keyword": "jsonb_to_record",
        "description": "Expands the top-level JSONB object to a row having the composite type defined by an AS clause."
      },
      {
        "keyword": "json_to_recordset",
        "description": "Expands the top-level JSON array of objects to a set of rows having the composite type defined by an AS clause."
      },
      {
        "keyword": "jsonb_to_recordset",
        "description": "Expands the top-level JSONB array of objects to a set of rows having the composite type defined by an AS clause."
      },
      {
        "keyword": "json_strip_nulls",
        "description": "Deletes all object fields that have null values from the given JSON value, recursively."
      },
      {
        "keyword": "jsonb_strip_nulls",
        "description": "Deletes all object fields that have null values from the given JSONB value, recursively."
      },
      {
        "keyword": "jsonb_set",
        "description": "Returns target with the item designated by path replaced by new_value, or with new_value added if create_if_missing is true (which is the default) and the item designated by path does not exist."
      },
      {
        "keyword": "jsonb_set_lax",
        "description": "If new_value is not NULL, behaves identically to jsonb_set. Otherwise behaves according to the value of null_value_treatment which must be one of 'raise_exception', 'use_json_null', 'delete_key', or 'return_target'. The default is 'use_json_null'."
      },
      {
        "keyword": "jsonb_insert",
        "description": "Returns target with new_value inserted."
      },
      {
        "keyword": "jsonb_path_exists",
        "description": "Checks whether the JSON path returns any item for the specified JSON value."
      },
      {
        "keyword": "jsonb_path_match",
        "description": "Returns the result of a JSON path predicate check for the specified JSON value."
      },
      {
        "keyword": "jsonb_path_query",
        "description": "Returns all JSON items returned by the JSON path for the specified JSON value."
      },
      {
        "keyword": "jsonb_path_query_array",
        "description": "Returns all JSON items returned by the JSON path for the specified JSON value, as a JSON array."
      },
      {
        "keyword": "jsonb_path_query_first",
        "description": "Returns the first JSON item returned by the JSON path for the specified JSON value. Returns NULL if there are no results."
      },
      {
        "keyword": "jsonb_path_exists_tz",
        "description": "Support comparisons of date/time values that require timezone-aware conversions."
      },
      {
        "keyword": "jsonb_path_match_tz",
        "description": "Support comparisons of date/time values that require timezone-aware conversions."
      },
      {
        "keyword": "jsonb_path_query_tz",
        "description": "Support comparisons of date/time values that require timezone-aware conversions."
      },
      {
        "keyword": "jsonb_path_query_array_tz",
        "description": "Support comparisons of date/time values that require timezone-aware conversions."
      },
      {
        "keyword": "jsonb_path_query_first_tz",
        "description": "Support comparisons of date/time values that require timezone-aware conversions."
      },
      {
        "keyword": "jsonb_pretty",
        "description": "Converts the given JSON value to pretty-printed, indented text."
      },
      {
        "keyword": "json_typeof",
        "description": "Returns the type of the top-level JSON value as a text string."
      },
      {
        "keyword": "jsonb_typeof",
        "description": "Returns the type of the top-level JSONB value as a text string."
      }
    ]
  },
  {
    "description": "Sequence manipulation functions https://www.postgresql.org/docs/14/functions-sequence.html#FUNCTIONS-SEQUENCE-TABLE",
    "keywords": [
      {
        "keyword": "nextval",
        "description": "Advance sequence and return new value"
      },
      {
        "keyword": "setval",
        "description": "Set sequence's current value"
      },
      {
        "keyword": "currval",
        "description": "Return value most recently obtained with nextval"
      },
      {
        "keyword": "lastval",
        "description": "Return value most recently obtained with nextval"
      }
    ]
  },
  {
    "description": "Conditional Expressions hhttps://www.postgresql.org/docs/14/functions-conditional.html",
    "keywords": [
      {
        "keyword": "coalesce",
        "description": "Return first non-null argument."
      },
      {
        "keyword": "nullif",
        "description": "Return null if two arguments are equal, otherwise return the first argument."
      },
      {
        "keyword": "greatest",
        "description": "Return greatest of a list of values."
      },
      {
        "keyword": "least",
        "description": "Return smallest of a list of values."
      }
    ]
  },
  {
    "description": "Array Functions https://www.postgresql.org/docs/14/functions-array.html#ARRAY-FUNCTIONS-TABLE",
    "keywords": [
      {
        "keyword": "array_append",
        "description": "Appends an element to the end of an array (same as the || operator)."
      },
      {
        "keyword": "array_cat",
        "description": "Concatenates two arrays (same as the || operator)."
      },
      {
        "keyword": "array_dims",
        "description": "Returns a text representation of the array's dimensions."
      },
      {
        "keyword": "array_fill",
        "description": "Returns an array filled with copies of the given value, having dimensions of the lengths specified by the second argument. The optional third argument supplies lower-bound values for each dimension (which default to all 1)."
      },
      {
        "keyword": "array_length",
        "description": "Returns the length of the requested array dimension. (Produces NULL instead of 0 for empty or missing array dimensions.)"
      },
      {
        "keyword": "array_lower",
        "description": "Returns the lower bound of the requested array dimension."
      },
      {
        "keyword": "array_ndims",
        "description": "Returns the number of dimensions of the array."
      },
      {
        "keyword": "array_position",
        "description": "Returns the subscript of the first occurrence of the second argument in the array, or NULL if it's not present."
      },
      {
        "keyword": "array_prepend",
        "description": "Prepends an element to the beginning of an array (same as the || operator)."
      },
      {
        "keyword": "array_remove",
        "description": "Removes all elements equal to the given value from the array. The array must be one-dimensional. Comparisons are done using IS NOT DISTINCT FROM semantics, so it is possible to remove NULLs."
      },
      {
        "keyword": "array_replace",
        "description": "Replaces each array element equal to the second argument with the third argument."
      },
      {
        "keyword": "array_to_string",
        "description": "Converts each array element to its text representation, and concatenates those separated by the delimiter string. If null_string is given and is not NULL, then NULL array entries are represented by that string; otherwise, they are omitted."
      },
      {
        "keyword": "array_upper",
        "description": "Returns the upper bound of the requested array dimension."
      },
      {
        "keyword": "cardinality",
        "description": "Returns the total number of elements in the array, or 0 if the array is empty."
      },
      {
        "keyword": "trim_array",
        "description": "Trims an array by removing the last n elements. If the array is multidimensional, only the first dimension is trimmed."
      },
      {
        "keyword": "unnest",
        "description": "Expands an array into a set of rows. The array's elements are read out in storage order."
      }
    ]
  },
  {
    "description": "Range Functions https://www.postgresql.org/docs/14/functions-range.html#RANGE-FUNCTIONS-TABLE",
    "keywords": [
      {
        "keyword": "lower",
        "description": "Extracts the lower bound of the range (NULL if the range is empty or the lower bound is infinite)."
      },
      {
        "keyword": "upper",
        "description": "Extracts the upper bound of the range (NULL if the range is empty or the upper bound is infinite)."
      },
      {
        "keyword": "isempty",
        "description": "Is the range empty?"
      },
      {
        "keyword": "lower_inc",
        "description": "Is the range's lower bound inclusive?"
      },
      {
        "keyword": "upper_inc",
        "description": "Is the range's upper bound inclusive?"
      },
      {
        "keyword": "lower_inf",
        "description": "Is the range's lower bound infinite?"
      },
      {
        "keyword": "upper_inf",
        "description": "Is the range's upper bound infinite?"
      },
      {
        "keyword": "range_merge",
        "description": "Computes the smallest range that includes both of the given ranges."
      }
    ]
  },
  {
    "description": "Multi-range Functions https://www.postgresql.org/docs/14/functions-range.html#MULTIRANGE-FUNCTIONS-TABLE",
    "keywords": [
      {
        "keyword": "multirange",
        "description": "Returns a multirange containing just the given range."
      }
    ]
  },
  {
    "description": "General purpose aggregate functions https://www.postgresql.org/docs/14/functions-aggregate.html#FUNCTIONS-AGGREGATE-TABLE",
    "keywords": [
      {
        "keyword": "array_agg",
        "description": "Collects all the input values, including nulls, into an array."
      },
      {
        "keyword": "avg",
        "description": "Computes the average (arithmetic mean) of all the non-null input values."
      },
      {
        "keyword": "bit_and",
        "description": "Computes the bitwise AND of all non-null input values."
      },
      {
        "keyword": "bit_or",
        "description": "Computes the bitwise OR of all non-null input values."
      },
      {
        "keyword": "bit_xor",
        "description": "Computes the bitwise exclusive OR of all non-null input values. Can be useful as a checksum for an unordered set of values."
      },
      {
        "keyword": "bool_and",
        "description": "Returns true if all non-null input values are true, otherwise false."
      },
      {
        "keyword": "bool_or",
        "description": "Returns true if any non-null input value is true, otherwise false."
      },
      {
        "keyword": "count",
        "description": "Computes the number of input rows."
      },
      {
        "keyword": "every",
        "description": "This is the SQL standard's equivalent to bool_and."
      },
      {
        "keyword": "json_agg",
        "description": "Collects all the input values, including nulls, into a JSON array. Values are converted to JSON as per to_json or to_jsonb."
      },
      {
        "keyword": "json_object_agg",
        "description": "Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_json or to_jsonb. Values can be null, but not keys."
      },
      {
        "keyword": "max",
        "description": "Computes the maximum of the non-null input values. Available for any numeric, string, date/time, or enum type, as well as inet, interval, money, oid, pg_lsn, tid, and arrays of any of these types."
      },
      {
        "keyword": "min",
        "description": "Computes the minimum of the non-null input values. Available for any numeric, string, date/time, or enum type, as well as inet, interval, money, oid, pg_lsn, tid, and arrays of any of these types."
      },
      {
        "keyword": "range_agg",
        "description": "Computes the union of the non-null input values."
      },
      {
        "keyword": "range_intersect_agg",
        "description": "Computes the intersection of the non-null input values."
      },
      {
        "keyword": "string_agg",
        "description": "Concatenates the non-null input values into a string. Each value after the first is preceded by the corresponding delimiter (if it's not null)."
      },
      {
        "keyword": "sum",
        "description": "Computes the sum of the non-null input values."
      },
      {
        "keyword": "xmlagg",
        "description": "Concatenates the non-null XML input values."
      }
    ]
  },
  {
    "description": "Statistical aggregate functions https://www.postgresql.org/docs/14/functions-aggregate.html#FUNCTIONS-AGGREGATE-STATISTICS-TABLE",
    "keywords": [
      {
        "keyword": "corr",
        "description": "Computes the correlation coefficient."
      },
      {
        "keyword": "covar_pop",
        "description": "Computes the population covariance."
      },
      {
        "keyword": "covar_samp",
        "description": "Computes the sample covariance."
      },
      {
        "keyword": "regr_avgx",
        "description": "Computes the average of the independent variable, sum(X)/N."
      },
      {
        "keyword": "regr_avgy",
        "description": "Computes the average of the dependent variable, sum(Y)/N."
      },
      {
        "keyword": "regr_count",
        "description": "Computes the number of rows in which both inputs are non-null."
      },
      {
        "keyword": "regr_intercept",
        "description": "Computes the y-intercept of the least-squares-fit linear equation determined by the (X, Y) pairs."
      },
      {
        "keyword": "regr_r2",
        "description": "Computes the square of the correlation coefficient."
      },
      {
        "keyword": "regr_slope",
        "description": "Computes the slope of the least-squares-fit linear equation determined by the (X, Y) pairs."
      },
      {
        "keyword": "regr_sxx",
        "description": "Computes the “sum of squares” of the independent variable, sum(X^2) - sum(X)^2/N."
      },
      {
        "keyword": "regr_sxy",
        "description": "Computes the “sum of products” of independent times dependent variables, sum(X*Y) - sum(X) * sum(Y)/N."
      },
      {
        "keyword": "regr_syy",
        "description": "Computes the “sum of squares” of the dependent variable, sum(Y^2) - sum(Y)^2/N."
      },
      {
        "keyword": "stddev",
        "description": "This is a historical alias for stddev_samp."
      },
      {
        "keyword": "stddev_pop",
        "description": "Computes the population standard deviation of the input values."
      },
      {
        "keyword": "stddev_samp",
        "description": "Computes the sample standard deviation of the input values."
      },
      {
        "keyword": "variance",
        "description": "This is a historical alias for var_samp."
      },
      {
        "keyword": "var_pop",
        "description": "Computes the population variance of the input values (square of the population standard deviation)."
      },
      {
        "keyword": "var_samp",
        "description": "Computes the sample variance of the input values (square of the sample standard deviation)."
      }
    ]
  },
  {
    "description": "Ordered-set aggregate functions https://www.postgresql.org/docs/14/functions-aggregate.html#FUNCTIONS-AGGREGATE-ORDEREDSET-TABLE",
    "keywords": [
      {
        "keyword": "mode",
        "description": "Computes the mode (most frequent value) of the input values."
      },
      {
        "keyword": "percentile_cont",
        "description": "Computes the continuous percentile of the input values."
      },
      {
        "keyword": "percentile_disc",
        "description": "Computes the discrete percentile of the input values."
      }
    ]
  },
  {
    "description": "Hypothetical-set aggregate functions https://www.postgresql.org/docs/14/functions-aggregate.html#FUNCTIONS-AGGREGATE-HYPOTHETICAL-TABLE",
    "keywords": [
      {
        "keyword": "rank",
        "description": "Computes the rank of the current row with gaps; same as row_number of its first peer."
      },
      {
        "keyword": "dense_rank",
        "description": "Computes the rank of the current row without gaps; this function counts peer groups."
      },
      {
        "keyword": "percent_rank",
        "description": "Computes the relative rank (percentile) of the current row: (rank - 1) / (total partition rows - 1)."
      },
      {
        "keyword": "cume_dist",
        "description": "Computes the relative rank of the current row: (number of partition rows preceding or peer with current row) / (total partition rows)."
      }
    ]
  },
  {
    "description": "Grouping set aggregate functions https://www.postgresql.org/docs/14/functions-aggregate.html#FUNCTIONS-AGGREGATE-GROUPINGSET-TABLE",
    "keywords": [
      {
        "keyword": "grouping",
        "description": "Returns a bit mask indicating which GROUP BY expressions are not included in the current grouping set."
      }
    ]
  },
  {
    "description": "Window functions https://www.postgresql.org/docs/14/functions-window.html#FUNCTIONS-WINDOW-TABLE",
    "keywords": [
      {
        "keyword": "row_number",
        "description": "Number of the current row within its partition, counting from 1."
      },
      {
        "keyword": "ntile",
        "description": "Integer ranging from 1 to the argument value, dividing the partition as equally as possible."
      },
      {
        "keyword": "lag",
        "description": "Returns value evaluated at the row that is offset rows before the current row within the partition; if there is no such row, instead returns default (which must be of a type compatible with value)."
      },
      {
        "keyword": "lead",
        "description": "Returns value evaluated at the row that is offset rows after the current row within the partition; if there is no such row, instead returns default (which must be of a type compatible with value)."
      },
      {
        "keyword": "first_value",
        "description": "Returns value evaluated at the row that is the first row of the window frame."
      },
      {
        "keyword": "last_value",
        "description": "Returns value evaluated at the row that is the last row of the window frame."
      },
      {
        "keyword": "nth_value",
        "description": "Returns value evaluated at the row that is the n'th row of the window frame (counting from 1); returns NULL if there is no such row."
      }
    ]
  },
  {
    "description": "Set returning functions https://www.postgresql.org/docs/14/functions-srf.html",
    "keywords": [
      {
        "keyword": "generate_series",
        "description": "Expands range arguments into a set of rows."
      },
      {
        "keyword": "generate_subscripts",
        "description": "Expands array arguments into a set of rows."
      }
    ]
  },
  {
    "description": "Abbreivated syntax for common functions",
    "keywords": [
      {
        "keyword": "pow",
        "description": "see power function"
      },
      {
        "keyword": "date",
        "description": "see to_date"
      }
    ]
  }
]
