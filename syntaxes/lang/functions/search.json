{
	"$schema": "../schema/function.schema.json",
	"description": "Text Search Functions see https://www.postgresql.org/docs/14/functions-textsearch.html",
	"name": "Text Search Functions",
	"keywords": {
		"array_to_tsvector": [
			{
				"description": "Converts an array of lexemes to a tsvector",
				"example": "SELECT array_to_tsvector('{fat,cat,rat}'::text[])",
				"returns": "tsvector",
				"parameters": {
					"array": "text[]"
				}
			}
		],
		"get_current_ts_config": [
			{
				"description": "Returns the OID of the current default text search configuration (as set by default_text_search_config)",
				"example": "SELECT get_current_ts_config()",
				"returns": "oid"
			}
		],
		"numnode": [
			{
				"description": "Returns the number of lexemes plus operators in the tsquery",
				"example": "SELECT numnode('fat & (cat | rat)'::tsquery)",
				"returns": "integer",
				"parameters": {
					"query": "tsquery"
				}
			}
		],
		"plainto_tsquery": [
			{
				"description": "Converts text to a tsquery, normalizing words according to the specified or default configuration.",
				"example": "SELECT plainto_tsquery('english', 'The Fat Cats')",
				"returns": "tsquery",
				"parameters": {
					"config": "name",
					"query": "text"
				}
			}
		],
		"phraseto_tsquery": [
			{
				"description": "Converts text to a tsquery, normalizing words according to the specified or default configuration.",
				"example": "SELECT phraseto_tsquery('english', 'The Fat Cats')",
				"returns": "tsquery",
				"parameters": {
					"config": "name",
					"query": "text"
				}
			}
		],
		"websearch_to_tsquery": [
			{
				"description": "Converts text to a tsquery, normalizing words according to the specified or default configuration.",
				"example": "SELECT websearch_to_tsquery('english','\"fat rat\" or cat dog')",
				"returns": "tsquery",
				"parameters": {
					"config": "name",
					"query": "text"
				}
			}
		],
		"querytree": [
			{
				"description": "Produces a representation of the indexable portion of a tsquery. A result that is empty or just T indicates a non-indexable query.",
				"example": "SELECT querytree('fat & (cat | rat)'::tsquery)",
				"returns": "text",
				"parameters": {
					"query": "tsquery"
				}
			}
		],
		"setweight": [
			{
				"description": "Assigns the specified weight to each element of the vector.",
				"example": "SELECT setweight('fat:1A cat:2B rat:3C'::tsvector, 'A')",
				"returns": "tsvector",
				"parameters": {
					"vector": "tsvector",
					"weight": "text"
				}
			}
		],
		"strip": [
			{
				"description": "Removes positions and weights from the tsvector.",
				"example": "SELECT strip('fat:1A cat:2B rat:3C'::tsvector)",
				"returns": "tsvector",
				"parameters": {
					"vector": "tsvector"
				}
			}
		],
		"to_tsquery": [
			{
				"description": "Converts text to a tsquery, normalizing words according to the specified or default configuration.",
				"example": "SELECT to_tsquery('english', 'The Fat Cats')",
				"returns": "tsquery",
				"parameters": {
					"config": "name",
					"query": "text"
				}
			}
		],
		"to_tsvector": [
			{
				"description": "Converts text to a tsvector, normalizing words according to the specified or default configuration.",
				"example": "SELECT to_tsvector('english', 'The Fat Cats')",
				"returns": "tsvector",
				"parameters": {
					"config": "name",
					"document ": "text"
				}
			},
			{
				"description": "Converts text to a tsvector, normalizing words according to the specified or default configuration.",
				"example": "SELECT to_tsvector('english', '{\"aa\": \"The Fat Rats\", \"b\": \"dog\"}'::json) ",
				"returns": "tsvector",
				"parameters": {
					"config": "name",
					"document ": "json"
				}
			},
			{
				"description": "Converts text to a tsvector, normalizing words according to the specified or default configuration.",
				"example": "SELECT to_tsvector('english', '{\"aa\": \"The Fat Rats\", \"b\": \"dog\"}'::jsonb) ",
				"returns": "tsvector",
				"parameters": {
					"config": "name",
					"document ": "jsonb"
				}
			}
		],
		"json_to_tsvector": [
			{
				"description": "Selects each item in the JSON document that is requested by the filter and converts each one to a tsvector, normalizing words according to the specified or default configuration.",
				"example": "SELECT json_to_tsvector('english', '{\"a\": \"The Fat Rats\", \"b\": 123}'::json, '[\"string\", \"numeric\"]') )",
				"returns": "tsvector",
				"parameters": {
					"config": "name",
					"document ": "json",
					"filter": "jsonb "
				}
			},
			{
				"description": "Selects each item in the JSON document that is requested by the filter and converts each one to a tsvector, normalizing words according to the specified or default configuration.",
				"example": "SELECT json_to_tsvector('english', '{\"a\": \"The Fat Rats\", \"b\": 123}'::jsonb, '[\"string\", \"numeric\"]') )",
				"returns": "tsvector",
				"parameters": {
					"config": "name",
					"document ": "jsonb",
					"filter": "jsonb "
				}
			}
		],
		"ts_delete": [
			{
				"description": "Removes any occurrence of the given lexeme from the vector.",
				"example": "SELECT ts_delete('fat:1A cat:2B rat:3C'::tsvector, 'cat')",
				"returns": "tsvector",
				"parameters": {
					"vector": "tsvector",
					"lexeme": "text"
				}
			}
		],
		"ts_filter": [
			{
				"description": "Selects only elements with the given weights from the vector.",
				"example": "SELECT ts_filter('fat:1A cat:2B rat:3C'::tsvector, 'A')",
				"returns": "tsvector",
				"parameters": {
					"vector": "tsvector",
					"weight": "text"
				}
			}
		],
		"ts_headline": [
			{
				"description": "Displays, in an abbreviated form, the match(es) for the query in the document, which must be raw text not a tsvector.",
				"example": "SELECT ts_headline('The Fat Cats', 'fat & (cat | rat)'::tsquery)",
				"returns": "text",
				"parameters": {
					"document": "text",
					"query": "tsquery",
					"options": "text"
				}
			},
			{
				"description": "Displays, in an abbreviated form, match(es) for the query that occur in string values within the JSON document.",
				"example": "SELECT ts_headline('{\"cat\":\"raining cats and dogs\"}'::jsonb, 'cat')",
				"returns": "text",
				"parameters": {
					"document": "text",
					"query": "json",
					"options": "text"
				}
			},
			{
				"description": "Displays, in an abbreviated form, match(es) for the query that occur in string values within the JSONB document.",
				"example": "SELECT ts_headline('{\"cat\":\"raining cats and dogs\"}'::jsonb, 'cat')",
				"returns": "text",
				"parameters": {
					"document": "text",
					"query": "jsonb",
					"options": "text"
				}
			}
		],
		"ts_rank": [
			{
				"description": "Computes a score showing how well the vector matches the query.",
				"example": "SELECT ts_rank(to_tsvector('raining cats and dogs'), 'cat') ",
				"returns": "real",
				"parameters": {
					"vector": "tsvector",
					"query": "tsquery",
					"weights": "real[]",
					"normalization": "integer"
				}
			}
		],
		"ts_rank_cd": [
			{
				"description": "Computes a score showing how well the vector matches the query, using a cover density algorithm.",
				"example": "SELECT ts_rank_cd(to_tsvector('raining cats and dogs'), 'cat') ",
				"returns": "real",
				"parameters": {
					"vector": "tsvector",
					"query": "tsquery",
					"weights": "real[]",
					"normalization": "integer"
				}
			}
		],
		"ts_rewrite": [
			{
				"description": "Replaces occurrences of target with substitute within the query.",
				"example": "SELECT ts_rewrite('a & b'::tsquery, 'a'::tsquery, 'foo|bar'::tsquery) ",
				"returns": "tsquery",
				"parameters": {
					"query": "tsquery",
					"target": "tsquery",
					"substitute": "tsquery"
				}
			},
			{
				"description": "Replaces portions of the query according to target(s) and substitute(s) obtained by executing a SELECT command.",
				"example": "SELECT ts_rewrite('a & b'::tsquery, 'SELECT t,s FROM aliases')",
				"returns": "tsquery",
				"parameters": {
					"query": "tsquery",
					"select": "text"
				}
			}
		],
		"tsquery_phrase": [
			{
				"description": "Constructs a phrase query that searches for matches of query1 and query2 at successive lexemes (same as <-> operator).",
				"example": "SELECT tsquery_phrase('fat'::tsquery, 'cat'::tsquery) ",
				"returns": "tsquery",
				"parameters": {
					"query1": "tsquery",
					"query2": "tsquery"
				}
			},
			{
				"description": "Constructs a phrase query that searches for matches of query1 and query2 at successive lexemes (same as <-> operator).",
				"example": "SELECT tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'), 10)",
				"returns": "tsquery",
				"parameters": {
					"query1": "tsquery",
					"query2": "tsquery",
					"distance ": "integer"
				}
			}
		],
		"tsvector_to_array": [
			{
				"description": "Converts a tsvector to an array of lexemes.",
				"example": "SELECT tsvector_to_array('fat:1A cat:2B rat:3C'::tsvector) ",
				"returns": "text[]",
				"parameters": {
					"vector": "tsvector"
				}
			}
		],
		"unnest": [
			{
				"description": "Expands the array of lexemes into a set of rows, one for each lexeme.",
				"example": "select * from unnest('cat:3 fat:2,4 rat:5A'::tsvector)",
				"returns": "setof record ( lexeme text, positions smallint[], weights text )",
				"parameters": {
					"vector": "tsvector"
				}
			}
		]
	}
}
